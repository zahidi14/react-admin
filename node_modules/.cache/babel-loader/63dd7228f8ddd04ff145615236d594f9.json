{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\nimport sanitizeRestProps from './sanitizeRestProps';\nimport InputHelperText from './InputHelperText';\n/**\n * Convert Date object to String\n *\n * @param {Date} value value to convert\n * @returns {String} A standardized date (yyyy-MM-dd), to be passed to an <input type=\"date\" />\n */\n\nvar convertDateToString = function (value) {\n  if (!(value instanceof Date) || isNaN(value.getDate())) return;\n  var pad = '00';\n  var yyyy = value.getFullYear().toString();\n  var MM = (value.getMonth() + 1).toString();\n  var dd = value.getDate().toString();\n  return yyyy + \"-\" + (pad + MM).slice(-2) + \"-\" + (pad + dd).slice(-2);\n};\n\nvar dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n\nvar getStringFromDate = function (value) {\n  // null, undefined and empty string values should not go through dateFormatter\n  // otherwise, it returns undefined and will make the input an uncontrolled one.\n  if (value == null || value === '') {\n    return '';\n  }\n\n  if (value instanceof Date) {\n    return convertDateToString(value);\n  } // valid dates should not be converted\n\n\n  if (dateRegex.test(value)) {\n    return value;\n  }\n\n  return convertDateToString(new Date(value));\n};\n\nexport var DateInput = function (_a) {\n  var _b = _a.format,\n      format = _b === void 0 ? getStringFromDate : _b,\n      label = _a.label,\n      options = _a.options,\n      source = _a.source,\n      resource = _a.resource,\n      helperText = _a.helperText,\n      _c = _a.margin,\n      margin = _c === void 0 ? 'dense' : _c,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      onFocus = _a.onFocus,\n      parse = _a.parse,\n      validate = _a.validate,\n      _d = _a.variant,\n      variant = _d === void 0 ? 'filled' : _d,\n      rest = __rest(_a, [\"format\", \"label\", \"options\", \"source\", \"resource\", \"helperText\", \"margin\", \"onBlur\", \"onChange\", \"onFocus\", \"parse\", \"validate\", \"variant\"]);\n\n  var _e = useInput(__assign({\n    format: format,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      id = _e.id,\n      input = _e.input,\n      isRequired = _e.isRequired,\n      _f = _e.meta,\n      error = _f.error,\n      touched = _f.touched;\n\n  return React.createElement(TextField, __assign({\n    id: id\n  }, input, {\n    variant: variant,\n    margin: margin,\n    type: \"date\",\n    error: !!(touched && error),\n    helperText: touched && error || helperText ? React.createElement(InputHelperText, {\n      touched: touched,\n      error: error,\n      helperText: helperText\n    }) : null,\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    InputLabelProps: {\n      shrink: true\n    }\n  }, options, sanitizeRestProps(rest)));\n};\nDateInput.propTypes = {\n  label: PropTypes.string,\n  options: PropTypes.object,\n  resource: PropTypes.string,\n  source: PropTypes.string\n};\nDateInput.defaultProps = {\n  options: {}\n};\nexport default DateInput;","map":null,"metadata":{},"sourceType":"module"}