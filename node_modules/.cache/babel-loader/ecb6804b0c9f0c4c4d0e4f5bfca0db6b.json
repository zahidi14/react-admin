{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React from 'react';\nimport { render } from '@testing-library/react';\nimport TestContext from './TestContext';\n/**\n * render with react-testing library adding redux context for unit test.\n * @example\n * const { dispatch, reduxStore, ...otherReactTestingLibraryHelper } = renderWithRedux(\n *     <TestedComponent />,\n *     initialState\n * );\n *\n * @param {ReactNode} component: The component you want to test in jsx\n * @param {Object} initialState: Optional initial state of the redux store\n * @param {Object} options: Render options, e.g. to use a custom container element\n * @return {{ dispatch, reduxStore, ...rest }} helper function to test rendered component.\n * Same as @testing-library/react render method with added dispatch and reduxStore helper\n * dispatch: spy on the redux stroe dispatch method\n * reduxStore: the redux store used by the tested component\n */\n\nexport default (function (component, initialState, options) {\n  if (initialState === void 0) {\n    initialState = {};\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var dispatch;\n  var reduxStore;\n  var renderResult = render(React.createElement(TestContext, {\n    initialState: initialState,\n    enableReducers: true\n  }, function (_a) {\n    var store = _a.store;\n    dispatch = jest.spyOn(store, 'dispatch');\n    reduxStore = store;\n    return component;\n  }), options);\n  return __assign({}, renderResult, {\n    rerender: function (newComponent) {\n      return renderResult.rerender(React.createElement(TestContext, {\n        initialState: initialState,\n        enableReducers: true\n      }, function (_a) {\n        var store = _a.store;\n        dispatch = jest.spyOn(store, 'dispatch');\n        reduxStore = store;\n        return newComponent;\n      }));\n    },\n    dispatch: dispatch,\n    reduxStore: reduxStore\n  });\n});","map":null,"metadata":{},"sourceType":"module"}