{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport useDataProvider from './useDataProvider';\nimport { useMemo } from 'react';\nimport useDeclarativeSideEffects from './useDeclarativeSideEffects';\n/**\n * This version of the useDataProvider hook ensure Query and Mutation components are still usable\n * with side effects declared as objects.\n *\n * @deprecated This is for backward compatibility only and will be removed in next major version.\n */\n\nvar useDataProviderWithDeclarativeSideEffects = function () {\n  var dataProvider = useDataProvider();\n  var getSideEffects = useDeclarativeSideEffects();\n  var dataProviderProxy = useMemo(function () {\n    return new Proxy(dataProvider, {\n      get: function (target, name) {\n        return function (resource, payload, options) {\n          var _a = getSideEffects(resource, options),\n              onSuccess = _a.onSuccess,\n              onFailure = _a.onFailure;\n\n          return target[name.toString()](resource, payload, __assign({}, options, {\n            onSuccess: onSuccess,\n            onFailure: onFailure\n          }));\n        };\n      }\n    });\n  }, [dataProvider, getSideEffects]);\n  return dataProviderProxy;\n};\n\nexport default useDataProviderWithDeclarativeSideEffects;","map":null,"metadata":{},"sourceType":"module"}