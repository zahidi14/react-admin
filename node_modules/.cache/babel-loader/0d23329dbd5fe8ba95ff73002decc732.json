{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useEffect } from 'react';\nimport { useSafeSetState } from '../util/hooks';\nimport useDataProvider from './useDataProvider';\nimport useDataProviderWithDeclarativeSideEffects from './useDataProviderWithDeclarativeSideEffects';\n/**\n * Call the data provider on mount\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false }\n * - success: { data: [data from response], total: [total from response], loading: false, loaded: true }\n * - error: { error: [error from response], loading: false, loaded: true }\n *\n * @param {Object} query\n * @param {string} query.type The method called on the data provider, e.g. 'getList', 'getOne'. Can also be a custom method if the dataProvider supports is.\n * @param {string} query.resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} query.payload The payload object, e.g; { post_id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {Function} options.onSuccess Side effect function to be executed upon success of failure, e.g. { onSuccess: response => refresh() } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) } }\n * @param {boolean} options.withDeclarativeSideEffectsSupport Set to true to support legacy side effects (e.g. { onSuccess: { refresh: true } })\n *\n * @returns The current request state. Destructure as { data, total, error, loading, loaded }.\n *\n * @example\n *\n * import { useQuery } from 'react-admin';\n *\n * const UserProfile = ({ record }) => {\n *     const { data, loading, error } = useQuery({\n *         type: 'getOne',\n *         resource: 'users',\n *         payload: { id: record.id }\n *     });\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <div>User {data.username}</div>;\n * };\n *\n * @example\n *\n * import { useQuery } from 'react-admin';\n *\n * const payload = {\n *    pagination: { page: 1, perPage: 10 },\n *    sort: { field: 'username', order: 'ASC' },\n * };\n * const UserList = () => {\n *     const { data, total, loading, error } = useQuery({\n *         type: 'getList',\n *         resource: 'users',\n *         payload\n *     });\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return (\n *         <div>\n *             <p>Total users: {total}</p>\n *             <ul>\n *                 {data.map(user => <li key={user.username}>{user.username}</li>)}\n *             </ul>\n *         </div>\n *     );\n * };\n */\n\nvar useQuery = function (query, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var type = query.type,\n      resource = query.resource,\n      payload = query.payload;\n\n  var withDeclarativeSideEffectsSupport = options.withDeclarativeSideEffectsSupport,\n      rest = __rest(options, [\"withDeclarativeSideEffectsSupport\"]);\n\n  var _a = useSafeSetState({\n    data: undefined,\n    error: null,\n    total: null,\n    loading: true,\n    loaded: false\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var dataProvider = useDataProvider();\n  var dataProviderWithDeclarativeSideEffects = useDataProviderWithDeclarativeSideEffects();\n  /* eslint-disable react-hooks/exhaustive-deps */\n\n  useEffect(function () {\n    /**\n     * Support legacy side effects, e.g. { onSuccess: { refresh: true, unSelectAll: true }}\n     *\n     * @deprecated to be removed in 4.0\n     */\n    var dataProviderWithSideEffects = withDeclarativeSideEffectsSupport ? dataProviderWithDeclarativeSideEffects : dataProvider;\n    setState(function (prevState) {\n      return __assign({}, prevState, {\n        loading: true\n      });\n    });\n    dataProviderWithSideEffects[type](resource, payload, rest).then(function (_a) {\n      var data = _a.data,\n          total = _a.total;\n      setState({\n        data: data,\n        total: total,\n        loading: false,\n        loaded: true\n      });\n    }).catch(function (error) {\n      setState({\n        error: error,\n        loading: false,\n        loaded: false\n      });\n    });\n  }, [// deep equality, see https://github.com/facebook/react/issues/14476#issuecomment-471199055\n  JSON.stringify({\n    query: query,\n    options: rest\n  }), dataProvider, dataProviderWithDeclarativeSideEffects, setState]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  return state;\n};\n\nexport default useQuery;","map":null,"metadata":{},"sourceType":"module"}