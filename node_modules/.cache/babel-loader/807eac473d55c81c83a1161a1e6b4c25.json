{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport sanitizeRestProps from './sanitizeRestProps';\nimport { fieldPropTypes } from './types';\nvar useStyles = makeStyles({\n  list: {\n    display: 'flex',\n    listStyleType: 'none'\n  },\n  image: {\n    margin: '0.5rem',\n    maxHeight: '10rem'\n  }\n});\nexport var ImageField = function (_a) {\n  var className = _a.className,\n      classesOverride = _a.classes,\n      record = _a.record,\n      source = _a.source,\n      src = _a.src,\n      title = _a.title,\n      rest = __rest(_a, [\"className\", \"classes\", \"record\", \"source\", \"src\", \"title\"]);\n\n  var sourceValue = get(record, source);\n  var classes = useStyles({\n    classes: classesOverride\n  });\n\n  if (!sourceValue) {\n    return React.createElement(\"div\", __assign({\n      className: className\n    }, sanitizeRestProps(rest)));\n  }\n\n  if (Array.isArray(sourceValue)) {\n    return React.createElement(\"ul\", __assign({\n      className: classnames(classes.list, className)\n    }, sanitizeRestProps(rest)), sourceValue.map(function (file, index) {\n      var fileTitleValue = get(file, title) || title;\n      var srcValue = get(file, src) || title;\n      return React.createElement(\"li\", {\n        key: index\n      }, React.createElement(\"img\", {\n        alt: fileTitleValue,\n        title: fileTitleValue,\n        src: srcValue,\n        className: classes.image\n      }));\n    }));\n  }\n\n  var titleValue = get(record, title) || title;\n  return React.createElement(\"div\", __assign({\n    className: className\n  }, sanitizeRestProps(rest)), React.createElement(\"img\", {\n    title: titleValue,\n    alt: titleValue,\n    src: sourceValue,\n    className: classes.image\n  }));\n}; // wat? TypeScript looses the displayName if we don't set it explicitly\n\nImageField.displayName = 'ImageField';\nImageField.defaultProps = {\n  addLabel: true\n};\nImageField.propTypes = __assign({}, fieldPropTypes, {\n  src: PropTypes.string,\n  title: PropTypes.string\n});\nexport default ImageField;","map":null,"metadata":{},"sourceType":"module"}