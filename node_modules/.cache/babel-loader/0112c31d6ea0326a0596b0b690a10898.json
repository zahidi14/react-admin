{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Labeled from '../input/Labeled';\n\nvar sanitizeRestProps = function (_a) {\n  var basePath = _a.basePath,\n      record = _a.record,\n      rest = __rest(_a, [\"basePath\", \"record\"]);\n\n  return rest;\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    input: {\n      width: theme.spacing(32)\n    }\n  };\n});\nexport var FormInput = function (_a) {\n  var _b, _c;\n\n  var input = _a.input,\n      classesOverride = _a.classes,\n      rest = __rest(_a, [\"input\", \"classes\"]);\n\n  var classes = useStyles({\n    classes: classesOverride\n  });\n  return input ? React.createElement(\"div\", {\n    className: classnames('ra-input', \"ra-input-\" + input.props.source, input.props.formClassName)\n  }, input.props.addLabel ? React.createElement(Labeled, __assign({\n    id: input.props.id || input.props.source\n  }, input.props, sanitizeRestProps(rest)), React.cloneElement(input, __assign({\n    className: classnames((_b = {}, _b[classes.input] = !input.props.fullWidth, _b), input.props.className),\n    id: input.props.id || input.props.source\n  }, rest))) : React.cloneElement(input, __assign({\n    className: classnames((_c = {}, _c[classes.input] = !input.props.fullWidth, _c), input.props.className),\n    id: input.props.id || input.props.source\n  }, rest))) : null;\n};\nFormInput.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object,\n  input: PropTypes.object\n}; // wat? TypeScript looses the displayName if we don't set it explicitly\n\nFormInput.displayName = 'FormInput';\nexport default FormInput;","map":null,"metadata":{},"sourceType":"module"}