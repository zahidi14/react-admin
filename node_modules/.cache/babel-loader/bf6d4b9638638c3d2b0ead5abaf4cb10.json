{"ast":null,"code":"/* jshint node:true */\n'use strict';\n/**\n * Module dependencies.\n */\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar EOL = require('../core/eol');\n\nvar joinRows = require('../core/join-rows');\n\nvar Handler = require('./handler');\n\nvar helper = require('../core/helper');\n\nvar Parser = function () {\n  function Parser(options) {\n    _classCallCheck(this, Parser);\n\n    this._options = this._parseOptions(options) || {};\n    this._handler = new Handler(this._options);\n    this._headers = this._options.headers || [];\n    this._escape = require('../core/escape-delimiters')(this._options.textDelimiter, this._options.rowDelimiter, this._options.forceTextDelimiter);\n  }\n  /**\n   * Generates a CSV file with optional headers based on the passed JSON,\n   * with can be an Object or Array.\n   *\n   * @param {Object|Array} json\n   * @param {Function} done(err,csv) - Callback function\n   *      if error, returning error in call back.\n   *      if csv is created successfully, returning csv output to callback.\n   */\n\n\n  _createClass(Parser, [{\n    key: 'parse',\n    value: function parse(json, done, stream) {\n      if (helper.isArray(json)) return done(null, this._parseArray(json, stream));else if (helper.isObject(json)) return done(null, this._parseObject(json));\n      return done(new Error('Unable to parse the JSON object, its not an Array or Object.'));\n    }\n  }, {\n    key: '_checkRows',\n    value: function _checkRows(rows) {\n      var lastRow = null;\n      var finalRows = [];\n\n      var fillGaps = function fillGaps(col, index) {\n        return col === '' || col === undefined ? lastRow[index] : col;\n      };\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var row = _step.value;\n          var missing = this._headers.length - row.length;\n          if (missing > 0) row = row.concat(Array(missing).join(\".\").split(\".\"));\n          if (lastRow && this._options.fillGaps) row = row.map(fillGaps);\n          finalRows.push(row.join(this._options.rowDelimiter));\n          lastRow = row;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return finalRows;\n    }\n  }, {\n    key: '_parseArray',\n    value: function _parseArray(json, stream) {\n      var self = this;\n      this._headers = this._headers || [];\n      var fileRows = [];\n      var outputFile = void 0;\n      var fillRows = void 0;\n\n      var getHeaderIndex = function getHeaderIndex(header) {\n        var index = self._headers.indexOf(header);\n\n        if (index === -1) {\n          self._headers.push(header);\n\n          index = self._headers.indexOf(header);\n        }\n\n        return index;\n      }; //Generate the csv output\n\n\n      fillRows = function fillRows(result) {\n        //Initialize the array with empty strings to handle 'unpopular' headers\n        var resultRows = [Array(self._headers.length).join(\".\").split(\".\")];\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = result[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var element = _step2.value;\n            var elementHeaderIndex = getHeaderIndex(element.item);\n            var placed = false;\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = resultRows[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var row = _step3.value;\n\n                if (!placed && row[elementHeaderIndex] === '' || row[elementHeaderIndex] === undefined) {\n                  row[elementHeaderIndex] = self._escape(element.value);\n                  placed = true;\n                  break;\n                }\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n\n            if (!placed) {\n              var newRow = Array(self._headers.length).join(\".\").split(\".\");\n              newRow[elementHeaderIndex] = self._escape(element.value);\n              resultRows.push(newRow);\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        fileRows = fileRows.concat(self._checkRows(resultRows));\n      };\n\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = json[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var item = _step4.value; //Call checkType to list all items inside this object\n          //Items are returned as a object {item: 'Prop Value, Item Name', value: 'Prop Data Value'}\n\n          var itemResult = self._handler.check(item, self._options.mainPathItem, item, json);\n\n          fillRows(itemResult);\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      if (!stream && self._options.includeHeaders) {\n        //Add the headers to the first line\n        fileRows.unshift(this.headers);\n      }\n\n      return joinRows(fileRows, self._options.endOfLine);\n    }\n  }, {\n    key: '_parseObject',\n    value: function _parseObject(json) {\n      var self = this;\n      var fileRows = [];\n      var parseResult = [];\n      var outputFile = void 0;\n      var fillRows = void 0;\n      var horizontalRows = [[], []];\n\n      fillRows = function fillRows(result) {\n        var value = result.value ? result.value.toString() : self._options.undefinedString;\n        value = self._escape(value); //Type header;value\n\n        if (self._options.verticalOutput) {\n          var row = [result.item, value];\n          fileRows.push(row.join(self._options.rowDelimiter));\n        } else {\n          horizontalRows[0].push(result.item);\n          horizontalRows[1].push(value);\n        }\n      };\n\n      for (var prop in json) {\n        var prefix = \"\";\n        if (this._options.mainPathItem) prefix = this._options.mainPathItem + this._options.headerPathString;\n        parseResult = this._handler.check(json[prop], prefix + prop, prop, json);\n        parseResult.forEach(fillRows);\n      }\n\n      if (!this._options.verticalOutput) {\n        fileRows.push(horizontalRows[0].join(this._options.rowDelimiter));\n        fileRows.push(horizontalRows[1].join(this._options.rowDelimiter));\n      }\n\n      return joinRows(fileRows, this._options.endOfLine);\n    }\n    /**\n     * Replaces the default options with the custom user options\n     *\n     * @param {Options} userOptions\n     */\n\n  }, {\n    key: '_parseOptions',\n    value: function _parseOptions(userOptions) {\n      var defaultOptions = {\n        headers: [],\n        //              Array\n        rename: [],\n        //               Array\n        headerPathString: '.',\n        //    String\n        rowDelimiter: ',',\n        //        String\n        textDelimiter: '\"',\n        //       String\n        arrayPathString: ';',\n        //     String\n        undefinedString: '',\n        //      String\n        endOfLine: EOL || '\\n',\n        //   String\n        mainPathItem: null,\n        //       String\n        booleanTrueString: null,\n        //  String\n        booleanFalseString: null,\n        // String\n        includeHeaders: true,\n        //     Boolean\n        fillGaps: false,\n        //          Boolean\n        verticalOutput: true,\n        //     Boolean\n        forceTextDelimiter: false,\n        //Boolean\n        //Handlers\n        handleString: undefined,\n        //  Function\n        handleNumber: undefined,\n        //  Function\n        handleBoolean: undefined,\n        // Function\n        handleDate: undefined //    Function\n\n      };\n      return Object.assign({}, defaultOptions, userOptions);\n    }\n  }, {\n    key: 'headers',\n    get: function get() {\n      var _this = this;\n\n      var headers = this._headers;\n      if (this._options.rename && this._options.rename.length > 0) headers = headers.map(function (header) {\n        return _this._options.rename[_this._options.headers.indexOf(header)] || header;\n      });\n\n      if (this._options.forceTextDelimiter) {\n        headers = headers.map(function (header) {\n          return '' + _this._options.textDelimiter + header + _this._options.textDelimiter;\n        });\n      }\n\n      if (this._options.mapHeaders) headers = headers.map(this._options.mapHeaders);\n      return headers.join(this._options.rowDelimiter);\n    }\n  }]);\n\n  return Parser;\n}();\n\nmodule.exports = Parser;","map":null,"metadata":{},"sourceType":"script"}