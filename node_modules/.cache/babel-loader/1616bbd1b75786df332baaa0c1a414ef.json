{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button as MuiButton, Tooltip, IconButton, useMediaQuery, makeStyles } from '@material-ui/core';\nimport classnames from 'classnames';\nimport { useTranslate } from 'ra-core';\nvar useStyles = makeStyles({\n  button: {\n    display: 'inline-flex',\n    alignItems: 'center'\n  },\n  label: {\n    paddingLeft: '0.5em'\n  },\n  labelRightIcon: {\n    paddingRight: '0.5em'\n  },\n  smallIcon: {\n    fontSize: 20\n  },\n  mediumIcon: {\n    fontSize: 22\n  },\n  largeIcon: {\n    fontSize: 24\n  }\n});\n\nvar Button = function (_a) {\n  var _b;\n\n  var _c = _a.alignIcon,\n      alignIcon = _c === void 0 ? 'left' : _c,\n      children = _a.children,\n      classesOverride = _a.classes,\n      className = _a.className,\n      color = _a.color,\n      disabled = _a.disabled,\n      label = _a.label,\n      size = _a.size,\n      rest = __rest(_a, [\"alignIcon\", \"children\", \"classes\", \"className\", \"color\", \"disabled\", \"label\", \"size\"]);\n\n  var translate = useTranslate();\n  var classes = useStyles({\n    classes: classesOverride\n  });\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('xs');\n  });\n  return isXSmall ? label && !disabled ? React.createElement(Tooltip, {\n    title: translate(label, {\n      _: label\n    })\n  }, React.createElement(IconButton, __assign({\n    \"aria-label\": translate(label, {\n      _: label\n    }),\n    className: className,\n    color: color\n  }, rest), children)) : React.createElement(IconButton, __assign({\n    className: className,\n    color: color,\n    disabled: disabled\n  }, rest), children) : React.createElement(MuiButton, __assign({\n    className: classnames(classes.button, className),\n    color: color,\n    size: size,\n    \"aria-label\": label ? translate(label, {\n      _: label\n    }) : undefined,\n    disabled: disabled\n  }, rest), alignIcon === 'left' && children && React.cloneElement(children, {\n    className: classes[size + \"Icon\"]\n  }), label && React.createElement(\"span\", {\n    className: classnames((_b = {}, _b[classes.label] = alignIcon === 'left', _b[classes.labelRightIcon] = alignIcon !== 'left', _b))\n  }, translate(label, {\n    _: label\n  })), alignIcon === 'right' && children && React.cloneElement(children, {\n    className: classes[size + \"Icon\"]\n  }));\n};\n\nButton.propTypes = {\n  alignIcon: PropTypes.string,\n  children: PropTypes.element,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  disabled: PropTypes.bool,\n  label: PropTypes.string,\n  size: PropTypes.oneOf(['small', 'medium', 'large'])\n};\nButton.defaultProps = {\n  color: 'primary',\n  size: 'small'\n};\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}