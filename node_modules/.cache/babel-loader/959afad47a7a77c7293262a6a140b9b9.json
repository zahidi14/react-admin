{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport pure from 'recompose/pure';\nimport FalseIcon from '@material-ui/icons/Clear';\nimport TrueIcon from '@material-ui/icons/Done';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport compose from 'recompose/compose';\nimport { useTranslate } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport sanitizeRestProps from './sanitizeRestProps';\nvar useStyles = makeStyles({\n  label: {\n    // Move the text out of the flow of the container.\n    position: 'absolute',\n    // Reduce its height and width to just one pixel.\n    height: 1,\n    width: 1,\n    // Hide any overflowing elements or text.\n    overflow: 'hidden',\n    // Clip the box to zero pixels.\n    clip: 'rect(0, 0, 0, 0)',\n    // Text won't wrap to a second line.\n    whiteSpace: 'nowrap'\n  }\n});\nexport var BooleanField = function (_a) {\n  var className = _a.className,\n      classesOverride = _a.classes,\n      source = _a.source,\n      _b = _a.record,\n      record = _b === void 0 ? {} : _b,\n      valueLabelTrue = _a.valueLabelTrue,\n      valueLabelFalse = _a.valueLabelFalse,\n      rest = __rest(_a, [\"className\", \"classes\", \"source\", \"record\", \"valueLabelTrue\", \"valueLabelFalse\"]);\n\n  var classes = useStyles({\n    classes: classesOverride\n  });\n  var translate = useTranslate();\n  var value = get(record, source);\n  var ariaLabel = value ? valueLabelTrue : valueLabelFalse;\n\n  if (!ariaLabel) {\n    ariaLabel = value === false ? 'ra.boolean.false' : 'ra.boolean.true';\n  }\n\n  if (value === false) {\n    return React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeRestProps(rest)), React.createElement(\"span\", {\n      className: classes.label\n    }, translate(ariaLabel, {\n      _: ariaLabel\n    })), React.createElement(FalseIcon, {\n      \"data-testid\": \"false\"\n    }));\n  }\n\n  if (value === true) {\n    return React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeRestProps(rest)), React.createElement(\"span\", {\n      className: classes.label\n    }, translate(ariaLabel, {\n      _: ariaLabel\n    })), React.createElement(TrueIcon, {\n      \"data-testid\": \"true\"\n    }));\n  }\n\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeRestProps(rest)));\n};\nvar EnhancedBooleanField = compose(pure)(BooleanField);\nEnhancedBooleanField.defaultProps = {\n  addLabel: true\n};\nEnhancedBooleanField.propTypes = __assign({}, Typography.propTypes, fieldPropTypes, {\n  valueLabelFalse: PropTypes.string,\n  valueLabelTrue: PropTypes.string\n});\nEnhancedBooleanField.displayName = 'EnhancedBooleanField';\nexport default EnhancedBooleanField;","map":null,"metadata":{},"sourceType":"module"}