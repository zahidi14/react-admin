{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useRef, useEffect } from 'react';\n/**\n * Debug hook showing which props updated between two renders\n * @example\n *\n * const MyComponent = React.memo(props => {\n *   useWhyDidYouUpdate('MyComponent', props);\n *   return <div...;\n * });\n *\n * @link https://usehooks.com/useWhyDidYouUpdate/\n */\n\nexport default function useWhyDidYouUpdate(name, props) {\n  // Get a mutable ref object where we can store props ...\n  // ... for comparison next time this hook runs.\n  var previousProps = useRef();\n  useEffect(function () {\n    if (previousProps.current) {\n      // Get all keys from previous and current props\n      var allKeys = Object.keys(__assign({}, previousProps.current, props)); // Use this object to keep track of changed props\n\n      var changesObj_1 = {}; // Iterate through keys\n\n      allKeys.forEach(function (key) {\n        // If previous is different from current\n        if (previousProps.current[key] !== props[key]) {\n          // Add to changesObj\n          changesObj_1[key] = {\n            from: previousProps.current[key],\n            to: props[key]\n          };\n        }\n      }); // If changesObj not empty then output to console\n\n      if (Object.keys(changesObj_1).length) {\n        console.log('[why-did-you-update]', name, changesObj_1);\n      }\n    } // Finally update previousProps with current props for next hook call\n\n\n    previousProps.current = props;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}