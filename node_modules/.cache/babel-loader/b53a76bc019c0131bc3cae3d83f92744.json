{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { isValidElement, useEffect, useMemo } from 'react';\nimport inflection from 'inflection';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { useCheckMinimumRequiredProps } from './checkMinimumRequiredProps';\nimport useListParams from './useListParams';\nimport useRecordSelection from './useRecordSelection';\nimport useVersion from './useVersion';\nimport { useTranslate } from '../i18n';\nimport { SORT_ASC } from '../reducer/admin/resource/list/queryReducer';\nimport { CRUD_GET_LIST } from '../actions';\nimport { useNotify } from '../sideEffect';\nimport useQueryWithStore from '../dataProvider/useQueryWithStore';\nvar defaultSort = {\n  field: 'id',\n  order: SORT_ASC\n};\n/**\n * Prepare data for the List view\n *\n * @param {Object} props The props passed to the List component.\n *\n * @return {Object} controllerProps Fetched and computed data for the List view\n *\n * @example\n *\n * import { useListController } from 'react-admin';\n * import ListView from './ListView';\n *\n * const MyList = props => {\n *     const controllerProps = useListController(props);\n *     return <ListView {...controllerProps} {...props} />;\n * }\n */\n\nvar useListController = function (props) {\n  useCheckMinimumRequiredProps('List', ['basePath', 'location', 'resource'], props);\n  var basePath = props.basePath,\n      resource = props.resource,\n      hasCreate = props.hasCreate,\n      location = props.location,\n      filterDefaultValues = props.filterDefaultValues,\n      _a = props.sort,\n      sort = _a === void 0 ? defaultSort : _a,\n      _b = props.perPage,\n      perPage = _b === void 0 ? 10 : _b,\n      filter = props.filter,\n      _c = props.debounce,\n      debounce = _c === void 0 ? 500 : _c;\n\n  if (filter && isValidElement(filter)) {\n    throw new Error('<List> received a React element as `filter` props. If you intended to set the list filter elements, use the `filters` (with an s) prop instead. The `filter` prop is internal and should not be set by the developer.');\n  }\n\n  var translate = useTranslate();\n  var notify = useNotify();\n  var version = useVersion();\n\n  var _d = useListParams({\n    resource: resource,\n    location: location,\n    filterDefaultValues: filterDefaultValues,\n    sort: sort,\n    perPage: perPage,\n    debounce: debounce\n  }),\n      query = _d[0],\n      queryModifiers = _d[1];\n\n  var _e = useRecordSelection(resource),\n      selectedIds = _e[0],\n      selectionModifiers = _e[1];\n  /**\n   * We don't use useGetList() here because we want the list of ids to be\n   * always available for optimistic rendering, and therefore we need a\n   * custom action (CRUD_GET_LIST), a custom reducer for ids and total\n   * (admin.resources.[resource].list.ids and admin.resources.[resource].list.total)\n   * and a custom selector for these reducers.\n   * Also we don't want that calls to useGetList() in userland change\n   * the list of ids in the main List view.\n   */\n\n\n  var _f = useQueryWithStore({\n    type: 'getList',\n    resource: resource,\n    payload: {\n      pagination: {\n        page: query.page,\n        perPage: query.perPage\n      },\n      sort: {\n        field: query.sort,\n        order: query.order\n      },\n      filter: __assign({}, query.filter, filter)\n    }\n  }, {\n    action: CRUD_GET_LIST,\n    version: version,\n    onFailure: function (error) {\n      return notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', 'warning');\n    }\n  }, function (state) {\n    return state.admin.resources[resource] ? state.admin.resources[resource].list.ids : null;\n  }, function (state) {\n    return state.admin.resources[resource] ? state.admin.resources[resource].list.total : null;\n  }),\n      ids = _f.data,\n      total = _f.total,\n      loading = _f.loading,\n      loaded = _f.loaded;\n\n  var data = useSelector(function (state) {\n    return state.admin.resources[resource] ? state.admin.resources[resource].data : null;\n  }, shallowEqual);\n  useEffect(function () {\n    if (query.page <= 0 || !loading && query.page > 1 && (ids || []).length === 0) {\n      // query for a page that doesn't exist, set page to 1\n      queryModifiers.setPage(1);\n    }\n  }, [loading, query.page, ids, queryModifiers]);\n  var currentSort = useMemo(function () {\n    return {\n      field: query.sort,\n      order: query.order\n    };\n  }, [query.sort, query.order]);\n  var resourceName = translate(\"resources.\" + resource + \".name\", {\n    smart_count: 2,\n    _: inflection.humanize(inflection.pluralize(resource))\n  });\n  var defaultTitle = translate('ra.page.list', {\n    name: resourceName\n  });\n  return {\n    basePath: basePath,\n    currentSort: currentSort,\n    data: data,\n    defaultTitle: defaultTitle,\n    displayedFilters: query.displayedFilters,\n    filterValues: query.filterValues,\n    hasCreate: hasCreate,\n    ids: ids,\n    loading: loading,\n    loaded: loaded,\n    onSelect: selectionModifiers.select,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: query.page,\n    perPage: query.perPage,\n    resource: resource,\n    selectedIds: selectedIds,\n    setFilters: queryModifiers.setFilters,\n    hideFilter: queryModifiers.hideFilter,\n    showFilter: queryModifiers.showFilter,\n    setPage: queryModifiers.setPage,\n    setPerPage: queryModifiers.setPerPage,\n    setSort: queryModifiers.setSort,\n    total: total,\n    version: version\n  };\n};\n\nexport var injectedProps = ['basePath', 'currentSort', 'data', 'defaultTitle', 'displayedFilters', 'filterValues', 'hasCreate', 'hideFilter', 'ids', 'loading', 'loaded', 'onSelect', 'onToggleItem', 'onUnselectItems', 'page', 'perPage', 'refresh', 'resource', 'selectedIds', 'setFilters', 'setPage', 'setPerPage', 'setSort', 'showFilter', 'total', 'version'];\n/**\n * Select the props injected by the useListController hook\n * to be passed to the List children need\n * This is an implementation of pick()\n */\n\nexport var getListControllerProps = function (props) {\n  return injectedProps.reduce(function (acc, key) {\n    var _a;\n\n    return __assign({}, acc, (_a = {}, _a[key] = props[key], _a));\n  }, {});\n};\n/**\n * Select the props not injected by the useListController hook\n * to be used inside the List children to sanitize props injected by List\n * This is an implementation of omit()\n */\n\nexport var sanitizeListRestProps = function (props) {\n  return Object.keys(props).filter(function (propName) {\n    return !injectedProps.includes(propName);\n  }).reduce(function (acc, key) {\n    var _a;\n\n    return __assign({}, acc, (_a = {}, _a[key] = props[key], _a));\n  }, {});\n};\nexport default useListController;","map":null,"metadata":{},"sourceType":"module"}