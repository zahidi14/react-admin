{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useInput, FieldTitle, useTranslate, useChoices } from 'ra-core';\nimport ResettableTextField from './ResettableTextField';\nimport InputHelperText from './InputHelperText';\n\nvar sanitizeRestProps = function (_a) {\n  var addLabel = _a.addLabel,\n      allowEmpty = _a.allowEmpty,\n      emptyValue = _a.emptyValue,\n      basePath = _a.basePath,\n      choices = _a.choices,\n      className = _a.className,\n      component = _a.component,\n      crudGetMatching = _a.crudGetMatching,\n      crudGetOne = _a.crudGetOne,\n      defaultValue = _a.defaultValue,\n      filter = _a.filter,\n      filterToQuery = _a.filterToQuery,\n      formClassName = _a.formClassName,\n      initializeForm = _a.initializeForm,\n      input = _a.input,\n      isRequired = _a.isRequired,\n      label = _a.label,\n      locale = _a.locale,\n      meta = _a.meta,\n      onChange = _a.onChange,\n      options = _a.options,\n      optionValue = _a.optionValue,\n      optionText = _a.optionText,\n      disableValue = _a.disableValue,\n      perPage = _a.perPage,\n      record = _a.record,\n      reference = _a.reference,\n      resource = _a.resource,\n      setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      sort = _a.sort,\n      source = _a.source,\n      textAlign = _a.textAlign,\n      translate = _a.translate,\n      translateChoice = _a.translateChoice,\n      validation = _a.validation,\n      rest = __rest(_a, [\"addLabel\", \"allowEmpty\", \"emptyValue\", \"basePath\", \"choices\", \"className\", \"component\", \"crudGetMatching\", \"crudGetOne\", \"defaultValue\", \"filter\", \"filterToQuery\", \"formClassName\", \"initializeForm\", \"input\", \"isRequired\", \"label\", \"locale\", \"meta\", \"onChange\", \"options\", \"optionValue\", \"optionText\", \"disableValue\", \"perPage\", \"record\", \"reference\", \"resource\", \"setFilter\", \"setPagination\", \"setSort\", \"sort\", \"source\", \"textAlign\", \"translate\", \"translateChoice\", \"validation\"]);\n\n  return rest;\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    input: {\n      minWidth: theme.spacing(20)\n    }\n  };\n});\n/**\n * An Input component for a select box, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <SelectInput source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <Select> component\n *\n * You can disable some choices by providing a `disableValue` field which name is `disabled` by default\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n *    { id: 976, first_name: 'William', last_name: 'Rinkerd', disabled: true },\n * ];\n *\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n *    { id: 976, first_name: 'William', last_name: 'Rinkerd', not_available: true },\n * ];\n * <SelectInput source=\"gender\" choices={choices} disableValue=\"not_available\" />\n *\n */\n\nvar SelectInput = function (_a) {\n  var allowEmpty = _a.allowEmpty,\n      _b = _a.choices,\n      choices = _b === void 0 ? [] : _b,\n      className = _a.className,\n      disableValue = _a.disableValue,\n      emptyText = _a.emptyText,\n      emptyValue = _a.emptyValue,\n      format = _a.format,\n      helperText = _a.helperText,\n      label = _a.label,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      onFocus = _a.onFocus,\n      options = _a.options,\n      optionText = _a.optionText,\n      optionValue = _a.optionValue,\n      parse = _a.parse,\n      resource = _a.resource,\n      source = _a.source,\n      translateChoice = _a.translateChoice,\n      validate = _a.validate,\n      rest = __rest(_a, [\"allowEmpty\", \"choices\", \"className\", \"disableValue\", \"emptyText\", \"emptyValue\", \"format\", \"helperText\", \"label\", \"onBlur\", \"onChange\", \"onFocus\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"source\", \"translateChoice\", \"validate\"]);\n\n  var translate = useTranslate();\n  var classes = useStyles({});\n\n  var _c = useChoices({\n    optionText: optionText,\n    optionValue: optionValue,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _c.getChoiceText,\n      getChoiceValue = _c.getChoiceValue;\n\n  var _d = useInput(__assign({\n    format: format,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      id = _d.id,\n      input = _d.input,\n      isRequired = _d.isRequired,\n      _e = _d.meta,\n      error = _e.error,\n      touched = _e.touched;\n\n  var renderEmptyItemOption = useCallback(function () {\n    return React.isValidElement(emptyText) ? React.cloneElement(emptyText) : translate(emptyText, {\n      _: emptyText\n    });\n  }, [emptyText, translate]);\n  var renderMenuItemOption = useCallback(function (choice) {\n    return getChoiceText(choice);\n  }, [getChoiceText]);\n  return React.createElement(ResettableTextField, __assign({\n    id: id\n  }, input, {\n    select: true,\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    className: classes.input + \" \" + className,\n    clearAlwaysVisible: true,\n    error: !!(touched && error),\n    helperText: touched && error || helperText ? React.createElement(InputHelperText, {\n      touched: touched,\n      error: error,\n      helperText: helperText\n    }) : null\n  }, options, sanitizeRestProps(rest)), allowEmpty ? React.createElement(MenuItem, {\n    value: emptyValue,\n    key: \"null\",\n    \"aria-label\": translate('ra.action.clear_input_value'),\n    title: translate('ra.action.clear_input_value')\n  }, renderEmptyItemOption()) : null, choices.map(function (choice) {\n    return React.createElement(MenuItem, {\n      key: getChoiceValue(choice),\n      value: getChoiceValue(choice),\n      disabled: get(choice, disableValue)\n    }, renderMenuItemOption(choice));\n  }));\n};\n\nSelectInput.propTypes = {\n  allowEmpty: PropTypes.bool.isRequired,\n  emptyText: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  emptyValue: PropTypes.any,\n  choices: PropTypes.arrayOf(PropTypes.object),\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  label: PropTypes.string,\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]).isRequired,\n  optionValue: PropTypes.string.isRequired,\n  disableValue: PropTypes.string,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nSelectInput.defaultProps = {\n  allowEmpty: false,\n  emptyText: '',\n  emptyValue: '',\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true,\n  disableValue: 'disabled'\n};\nexport default SelectInput;","map":null,"metadata":{},"sourceType":"module"}