{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useState, useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Menu from '@material-ui/core/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ContentFilter from '@material-ui/icons/FilterList';\nimport classnames from 'classnames';\nimport lodashGet from 'lodash/get';\nimport FilterButtonMenuItem from './FilterButtonMenuItem';\nimport Button from '../button/Button';\nvar useStyles = makeStyles({\n  root: {\n    display: 'inline-block'\n  }\n});\n\nvar FilterButton = function (_a) {\n  var filters = _a.filters,\n      displayedFilters = _a.displayedFilters,\n      filterValues = _a.filterValues,\n      showFilter = _a.showFilter,\n      classesOverride = _a.classes,\n      className = _a.className,\n      resource = _a.resource,\n      rest = __rest(_a, [\"filters\", \"displayedFilters\", \"filterValues\", \"showFilter\", \"classes\", \"className\", \"resource\"]);\n\n  var _b = useState(false),\n      open = _b[0],\n      setOpen = _b[1];\n\n  var anchorEl = useRef();\n  var classes = useStyles({\n    classes: classesOverride\n  });\n  var hiddenFilters = filters.filter(function (filterElement) {\n    return !filterElement.props.alwaysOn && !displayedFilters[filterElement.props.source] && typeof lodashGet(filterValues, filterElement.props.source) === 'undefined';\n  });\n  var handleClickButton = useCallback(function (event) {\n    // This prevents ghost click.\n    event.preventDefault();\n    setOpen(true);\n    anchorEl.current = event.currentTarget;\n  }, [anchorEl, setOpen]);\n  var handleRequestClose = useCallback(function () {\n    setOpen(false);\n  }, [setOpen]);\n  var handleShow = useCallback(function (_a) {\n    var source = _a.source,\n        defaultValue = _a.defaultValue;\n    showFilter(source, defaultValue);\n    setOpen(false);\n  }, [showFilter, setOpen]);\n  if (hiddenFilters.length === 0) return null;\n  return React.createElement(\"div\", __assign({\n    className: classnames(classes.root, className)\n  }, rest), React.createElement(Button, {\n    className: \"add-filter\",\n    label: \"ra.action.add_filter\",\n    onClick: handleClickButton\n  }, React.createElement(ContentFilter, null)), React.createElement(Menu, {\n    open: open,\n    anchorEl: anchorEl.current,\n    onClose: handleRequestClose\n  }, hiddenFilters.map(function (filterElement) {\n    return React.createElement(FilterButtonMenuItem, {\n      key: filterElement.props.source,\n      filter: filterElement.props,\n      resource: resource,\n      onShow: handleShow\n    });\n  })));\n};\n\nFilterButton.propTypes = {\n  resource: PropTypes.string.isRequired,\n  filters: PropTypes.arrayOf(PropTypes.node).isRequired,\n  displayedFilters: PropTypes.object.isRequired,\n  filterValues: PropTypes.object.isRequired,\n  showFilter: PropTypes.func.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string\n};\nexport default FilterButton;","map":null,"metadata":{},"sourceType":"module"}