{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React from 'react';\nimport mediaQuery from 'css-mediaquery';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\n/**\n * Test utility to simulate a device form factor for server-side mediaQueries\n *\n * Do not use inside a browser.\n *\n * @example\n *\n * <DeviceTestWrapper width=\"sm\">\n *     <MyResponsiveComponent />\n * <DeviceTestWrapper>\n */\n\nvar DeviceTestWrapper = function (_a) {\n  var _b = _a.width,\n      width = _b === void 0 ? 'md' : _b,\n      children = _a.children;\n  var theme = createMuiTheme(); // Use https://github.com/ericf/css-mediaquery as ponyfill.\n\n  var ssrMatchMedia = function (query) {\n    return {\n      matches: mediaQuery.match(query, {\n        // The estimated CSS width of the browser.\n        // For the sake of this demo, we are using a fixed value.\n        // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\n        // or user-agent resolution.\n        width: theme.breakpoints.width(width)\n      })\n    };\n  };\n\n  return React.createElement(ThemeProvider, {\n    theme: __assign({}, theme, {\n      props: {\n        MuiUseMediaQuery: {\n          ssrMatchMedia: ssrMatchMedia\n        }\n      }\n    })\n  }, children);\n};\n\nexport default DeviceTestWrapper;","map":null,"metadata":{},"sourceType":"module"}