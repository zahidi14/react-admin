{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport DownloadIcon from '@material-ui/icons/GetApp';\nimport { downloadCSV, useDataProvider, useNotify } from 'ra-core';\nimport jsonExport from 'jsonexport/dist';\nimport Button from './Button';\n\nvar sanitizeRestProps = function (_a) {\n  var basePath = _a.basePath,\n      rest = __rest(_a, [\"basePath\"]);\n\n  return rest;\n};\n/**\n * Extracts, aggregates and deduplicates the ids of related records\n *\n * @example\n *     const books = [\n *         { id: 1, author_id: 123, title: 'Pride and Prejudice' },\n *         { id: 2, author_id: 123, title: 'Sense and Sensibility' },\n *         { id: 3, author_id: 456, title: 'War and Peace' },\n *     ];\n *     getRelatedIds(books, 'author_id'); => [123, 456]\n *\n * @example\n *     const books = [\n *         { id: 1, tag_ids: [1, 2], title: 'Pride and Prejudice' },\n *         { id: 2, tag_ids: [2, 3], title: 'Sense and Sensibility' },\n *         { id: 3, tag_ids: [4], title: 'War and Peace' },\n *     ];\n *     getRelatedIds(records, 'tag_ids'); => [1, 2, 3, 4]\n *\n * @param {Object[]} records An array of records\n * @param {string} field the identifier of the record field to use\n */\n\n\nexport var getRelatedIds = function (records, field) {\n  return Array.from(new Set(records.filter(function (record) {\n    return record[field] != null;\n  }).map(function (record) {\n    return record[field];\n  }).reduce(function (ids, value) {\n    return ids.concat(value);\n  }, [])));\n};\n/**\n * Helper function for calling the data provider with GET_MANY\n * via redux and saga, and getting a Promise in return\n *\n * @example\n *     fetchRelatedRecords(records, 'post_id', 'posts').then(posts =>\n *          posts.map(record => ({\n *              ...record,\n *              post_title: posts[record.post_id].title,\n *          }));\n */\n\nvar fetchRelatedRecords = function (dataProvider) {\n  return function (data, field, resource) {\n    return dataProvider.getMany(resource, {\n      ids: getRelatedIds(data, field)\n    }).then(function (_a) {\n      var data = _a.data;\n      return data.reduce(function (acc, post) {\n        acc[post.id] = post;\n        return acc;\n      }, {});\n    });\n  };\n};\n\nvar DefaultIcon = React.createElement(DownloadIcon, null);\nvar defaultFilter = {};\n\nvar ExportButton = function (_a) {\n  var exporter = _a.exporter,\n      sort = _a.sort,\n      _b = _a.filter,\n      filter = _b === void 0 ? defaultFilter : _b,\n      _c = _a.maxResults,\n      maxResults = _c === void 0 ? 1000 : _c,\n      resource = _a.resource,\n      onClick = _a.onClick,\n      _d = _a.label,\n      label = _d === void 0 ? 'ra.action.export' : _d,\n      _e = _a.icon,\n      icon = _e === void 0 ? DefaultIcon : _e,\n      rest = __rest(_a, [\"exporter\", \"sort\", \"filter\", \"maxResults\", \"resource\", \"onClick\", \"label\", \"icon\"]);\n\n  var dataProvider = useDataProvider();\n  var notify = useNotify();\n  var handleClick = useCallback(function (event) {\n    dataProvider.getList(resource, {\n      sort: sort,\n      filter: filter,\n      pagination: {\n        page: 1,\n        perPage: maxResults\n      }\n    }).then(function (_a) {\n      var data = _a.data;\n      return exporter ? exporter(data, fetchRelatedRecords(dataProvider), dataProvider) : jsonExport(data, function (err, csv) {\n        return downloadCSV(csv, resource);\n      });\n    }).catch(function (error) {\n      console.error(error);\n      notify('ra.notification.http_error', 'warning');\n    });\n\n    if (typeof onClick === 'function') {\n      onClick(event);\n    }\n  }, [dataProvider, exporter, filter, maxResults, notify, onClick, resource, sort]);\n  return React.createElement(Button, __assign({\n    onClick: handleClick,\n    label: label\n  }, sanitizeRestProps(rest)), icon);\n};\n\nExportButton.propTypes = {\n  basePath: PropTypes.string,\n  exporter: PropTypes.func,\n  filter: PropTypes.object,\n  label: PropTypes.string,\n  maxResults: PropTypes.number,\n  resource: PropTypes.string.isRequired,\n  sort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  icon: PropTypes.element\n};\nexport default ExportButton;","map":null,"metadata":{},"sourceType":"module"}