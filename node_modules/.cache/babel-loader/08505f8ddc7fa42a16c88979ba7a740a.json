{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { isValidElement, cloneElement } from 'react';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\nimport { makeStyles, MenuItem } from '@material-ui/core';\nimport classnames from 'classnames';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      fontWeight: 400\n    },\n    selected: {\n      fontWeight: 500\n    },\n    suggestion: {\n      display: 'block',\n      fontFamily: theme.typography.fontFamily\n    },\n    suggestionText: {\n      fontWeight: 300\n    },\n    highlightedSuggestionText: {\n      fontWeight: 500\n    }\n  };\n});\n\nvar AutocompleteSuggestionItem = function (_a) {\n  var _b;\n\n  var suggestion = _a.suggestion,\n      index = _a.index,\n      highlightedIndex = _a.highlightedIndex,\n      isSelected = _a.isSelected,\n      filterValue = _a.filterValue,\n      classesOverride = _a.classes,\n      getSuggestionText = _a.getSuggestionText,\n      rest = __rest(_a, [\"suggestion\", \"index\", \"highlightedIndex\", \"isSelected\", \"filterValue\", \"classes\", \"getSuggestionText\"]);\n\n  var classes = useStyles({\n    classes: classesOverride\n  });\n  var isHighlighted = highlightedIndex === index;\n  var suggestionText = getSuggestionText(suggestion);\n  var matches;\n  var parts;\n\n  if (!isValidElement(suggestionText)) {\n    matches = match(suggestionText, filterValue);\n    parts = parse(suggestionText, matches);\n  }\n\n  return React.createElement(MenuItem, __assign({\n    key: suggestionText,\n    selected: isHighlighted,\n    className: classnames(classes.root, (_b = {}, _b[classes.selected] = isSelected, _b))\n  }, rest), isValidElement(suggestionText) ? cloneElement(suggestionText, {\n    filterValue: filterValue\n  }) : React.createElement(\"div\", {\n    className: classes.suggestion\n  }, parts.map(function (part, index) {\n    return part.highlight ? React.createElement(\"span\", {\n      key: index,\n      className: classes.highlightedSuggestionText\n    }, part.text) : React.createElement(\"strong\", {\n      key: index,\n      className: classes.suggestionText\n    }, part.text);\n  })));\n};\n\nexport default AutocompleteSuggestionItem;","map":null,"metadata":{},"sourceType":"module"}