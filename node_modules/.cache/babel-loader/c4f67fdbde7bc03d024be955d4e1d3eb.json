{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useReducer, useEffect, useRef, useCallback } from 'react';\nimport { SORT_ASC, SORT_DESC } from '../reducer/admin/resource/list/queryReducer';\n\nvar sortReducer = function (state, action) {\n  switch (action.type) {\n    case 'SET_SORT':\n      return action.payload.sort;\n\n    case 'SET_SORT_FIELD':\n      {\n        var field = action.payload.field;\n        var order = state.field === field ? state.order === SORT_ASC ? SORT_DESC : SORT_ASC : SORT_ASC;\n        return {\n          field: field,\n          order: order\n        };\n      }\n\n    case 'SET_SORT_ORDER':\n      {\n        var order = action.payload.order;\n        return __assign({}, state, {\n          order: order\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport var defaultSort = {\n  field: 'id',\n  order: 'DESC'\n};\n/**\n * set the sort { field, order }\n * @name setSort\n * @function\n * @param {Sort} sort the sort object\n */\n\n/**\n * set the sort field, swap the order if the field is the same\n * @name setSortField\n * @function\n * @param {string} field the sort field\n */\n\n/**\n * set the sort order\n * @name setSortOrder\n * @function\n * @param {string} order the sort order eiather ASC or DESC\n */\n\n/**\n * @typedef SortProps\n * @type {Object}\n * @property {Object} sort: the sort object.\n * @property {String} sort.field: the sort object.\n * @property {'ASC' | 'DESC'} sort.order: the sort object.\n * @property {setSort} setSort\n * @property {setSortField} setSortField\n * @property {setSortOrder} setSortOrder\n */\n\n/**\n * Hooks to provide sort state\n *\n * @example\n *\n * const { sort, setSort, setSortField, setSortOrder } = useSort({\n *      field: 'name',\n *      order: 'ASC',\n * });\n *\n * setSort({ field: 'name', order: 'ASC' });\n * // is the same as\n * setSortField('name');\n * setSortOrder('ASC');\n *\n * @param {Object} initialSort\n * @param {string} initialSort.field The initial sort field\n * @param {string} initialSort.order The initial sort order\n * @returns {SortProps} The sort props\n */\n\nexport default (function (initialSort) {\n  if (initialSort === void 0) {\n    initialSort = defaultSort;\n  }\n\n  var _a = useReducer(sortReducer, initialSort),\n      sort = _a[0],\n      dispatch = _a[1];\n\n  var isFirstRender = useRef(true);\n  useEffect(function () {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    dispatch({\n      type: 'SET_SORT',\n      payload: {\n        sort: initialSort\n      }\n    });\n  }, [initialSort.field, initialSort.order]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    setSort: useCallback(function (sort) {\n      return dispatch({\n        type: 'SET_SORT',\n        payload: {\n          sort: sort\n        }\n      });\n    }, [dispatch]),\n    setSortField: useCallback(function (field) {\n      return dispatch({\n        type: 'SET_SORT_FIELD',\n        payload: {\n          field: field\n        }\n      });\n    }, [dispatch]),\n    setSortOrder: useCallback(function (order) {\n      return dispatch({\n        type: 'SET_SORT_ORDER',\n        payload: {\n          order: order\n        }\n      });\n    }, [dispatch]),\n    sort: sort\n  };\n});","map":null,"metadata":{},"sourceType":"module"}