{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Switch from '@material-ui/core/Switch';\nimport { FieldTitle, useInput } from 'ra-core';\nimport sanitizeRestProps from './sanitizeRestProps';\nimport InputHelperText from './InputHelperText';\nimport InputPropTypes from './InputPropTypes';\n\nvar BooleanInput = function (_a) {\n  var format = _a.format,\n      label = _a.label,\n      fullWidth = _a.fullWidth,\n      helperText = _a.helperText,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      onFocus = _a.onFocus,\n      options = _a.options,\n      parse = _a.parse,\n      resource = _a.resource,\n      source = _a.source,\n      validate = _a.validate,\n      rest = __rest(_a, [\"format\", \"label\", \"fullWidth\", \"helperText\", \"onBlur\", \"onChange\", \"onFocus\", \"options\", \"parse\", \"resource\", \"source\", \"validate\"]);\n\n  var _b = useInput(__assign({\n    format: format,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    type: 'checkbox',\n    validate: validate\n  }, rest)),\n      id = _b.id,\n      _c = _b.input,\n      finalFormOnChange = _c.onChange,\n      type = _c.type,\n      value = _c.value,\n      inputProps = __rest(_c, [\"onChange\", \"type\", \"value\"]),\n      isRequired = _b.isRequired,\n      _d = _b.meta,\n      error = _d.error,\n      touched = _d.touched;\n\n  var handleChange = useCallback(function (event, value) {\n    finalFormOnChange(value);\n  }, [finalFormOnChange]);\n  return React.createElement(FormGroup, __assign({}, sanitizeRestProps(rest)), React.createElement(FormControlLabel, {\n    control: React.createElement(Switch, __assign({\n      id: id,\n      color: \"primary\",\n      checked: !!value,\n      onChange: handleChange\n    }, inputProps, options)),\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    })\n  }), touched && error || helperText ? React.createElement(FormHelperText, {\n    error: !!error\n  }, React.createElement(InputHelperText, {\n    touched: touched,\n    error: error,\n    helperText: helperText\n  })) : null);\n};\n\nBooleanInput.propTypes = __assign({}, InputPropTypes, {\n  options: PropTypes.shape(Switch.propTypes)\n});\nBooleanInput.defaultProps = {\n  options: {}\n};\nexport default BooleanInput;","map":null,"metadata":{},"sourceType":"module"}