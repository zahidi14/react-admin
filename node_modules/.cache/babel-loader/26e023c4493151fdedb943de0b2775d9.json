{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport Polyglot from 'node-polyglot';\n/**\n * Build a polyglot-based i18nProvider based on a function returning the messages for a locale\n *\n * @example\n *\n * import { Admin, Resource, polyglotI18nProvider } from 'react-admin';\n * import englishMessages from 'ra-language-english';\n * import frenchMessages from 'ra-language-french';\n *\n * const messages = {\n *     fr: frenchMessages,\n *     en: englishMessages,\n * };\n * const i18nProvider = polyglotI18nProvider(locale => messages[locale])\n */\n\nexport default (function (getMessages, initialLocale, polyglotOptions) {\n  if (initialLocale === void 0) {\n    initialLocale = 'en';\n  }\n\n  if (polyglotOptions === void 0) {\n    polyglotOptions = {};\n  }\n\n  var locale = initialLocale;\n  var messages = getMessages(initialLocale);\n\n  if (messages instanceof Promise) {\n    throw new Error(\"The i18nProvider returned a Promise for the messages of the default locale (\" + initialLocale + \"). Please update your i18nProvider to return the messages of the default locale in a synchronous way.\");\n  }\n\n  var polyglot = new Polyglot(__assign({\n    locale: locale,\n    phrases: __assign({\n      '': ''\n    }, messages)\n  }, polyglotOptions));\n  var translate = polyglot.t.bind(polyglot);\n  return {\n    translate: function (key, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      return translate(key, options);\n    },\n    changeLocale: function (newLocale) {\n      return new Promise(function (resolve) {\n        // so we systematically return a Promise for the messages\n        // i18nProvider may return a Promise for language changes,\n        return resolve(getMessages(newLocale));\n      }).then(function (messages) {\n        locale = newLocale;\n        var newPolyglot = new Polyglot(__assign({\n          locale: newLocale,\n          phrases: __assign({\n            '': ''\n          }, messages)\n        }, polyglotOptions));\n        translate = newPolyglot.t.bind(newPolyglot);\n      });\n    },\n    getLocale: function () {\n      return locale;\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}