{"ast":null,"code":"import { useCallback, isValidElement } from 'react';\nimport set from 'lodash/set';\nimport useChoices from './useChoices';\nimport { useTranslate } from '../i18n';\n/*\n * Returns helper functions for suggestions handling.\n *\n * @param allowEmpty A boolean indicating whether an empty suggestion should be added\n * @param choices An array of available choices\n * @param emptyText The text to use for the empty suggestion. Defaults to an empty string\n * @param emptyValue The value to use for the empty suggestion. Defaults to `null`\n * @param limitChoicesToValue A boolean indicating whether the initial suggestions should be limited to the currently selected one(s)\n * @param matchSuggestion Optional unless `optionText` is a React element. Function which check wether a choice matches a filter. Must return a boolean.\n * @param optionText Either a string defining the property to use to get the choice text, a function or a React element\n * @param optionValue The property to use to get the choice value\n * @param selectedItem The currently selected item. May be an array of selected items\n * @param suggestionLimit The maximum number of suggestions returned, excluding the empty one if `allowEmpty` is `true`\n * @param translateChoice A boolean indicating whether to option text should be translated\n *\n * @returns An object with helper functions:\n * - getChoiceText: Returns the choice text or a React element\n * - getChoiceValue: Returns the choice value\n * - getSuggestions: A function taking a filter value (string) and returning the matching suggestions\n */\n\nvar useSuggestions = function (_a) {\n  var allowEmpty = _a.allowEmpty,\n      choices = _a.choices,\n      _b = _a.emptyText,\n      emptyText = _b === void 0 ? '' : _b,\n      _c = _a.emptyValue,\n      emptyValue = _c === void 0 ? null : _c,\n      limitChoicesToValue = _a.limitChoicesToValue,\n      matchSuggestion = _a.matchSuggestion,\n      optionText = _a.optionText,\n      optionValue = _a.optionValue,\n      selectedItem = _a.selectedItem,\n      _d = _a.suggestionLimit,\n      suggestionLimit = _d === void 0 ? 0 : _d,\n      translateChoice = _a.translateChoice;\n  var translate = useTranslate();\n\n  var _e = useChoices({\n    optionText: optionText,\n    optionValue: optionValue,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _e.getChoiceText,\n      getChoiceValue = _e.getChoiceValue;\n\n  var getSuggestions = useCallback(getSuggestionsFactory({\n    allowEmpty: allowEmpty,\n    choices: choices,\n    emptyText: translate(emptyText, {\n      _: emptyText\n    }),\n    emptyValue: emptyValue,\n    getChoiceText: getChoiceText,\n    getChoiceValue: getChoiceValue,\n    limitChoicesToValue: limitChoicesToValue,\n    matchSuggestion: matchSuggestion,\n    optionText: optionText,\n    optionValue: optionValue,\n    selectedItem: selectedItem,\n    suggestionLimit: suggestionLimit\n  }), [allowEmpty, choices, emptyText, emptyValue, getChoiceText, getChoiceValue, limitChoicesToValue, matchSuggestion, optionText, optionValue, selectedItem, suggestionLimit, translate]);\n  return {\n    getChoiceText: getChoiceText,\n    getChoiceValue: getChoiceValue,\n    getSuggestions: getSuggestions\n  };\n};\n\nexport default useSuggestions;\n\nvar escapeRegExp = function (value) {\n  return value ? value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : '';\n}; // $& means the whole matched string\n\n/**\n * Default matcher implementation which check whether the suggestion text matches the filter.\n */\n\n\nvar defaultMatchSuggestion = function (getChoiceText) {\n  return function (filter, suggestion) {\n    var suggestionText = getChoiceText(suggestion);\n    var isReactElement = isValidElement(suggestionText);\n    return isReactElement ? false : suggestionText.match( // We must escape any RegExp reserved characters to avoid errors\n    // For example, the filter might contains * which must be escaped as \\*\n    new RegExp(escapeRegExp(filter), 'i'));\n  };\n};\n/**\n * Get the suggestions to display after applying a fuzzy search on the available choices\n *\n * @example\n *\n * getSuggestions({\n *   choices: [{ id: 1, name: 'admin' }, { id: 2, name: 'publisher' }],\n *   optionText: 'name',\n *   optionValue: 'id',\n *   getSuggestionText: choice => choice[optionText],\n * })('pub')\n *\n * // Will return [{ id: 2, name: 'publisher' }]\n * getSuggestions({\n    *   choices: [{ id: 1, name: 'admin' }, { id: 2, name: 'publisher' }],\n    *   optionText: 'name',\n    *   optionValue: 'id',\n    *   getSuggestionText: choice => choice[optionText],\n    * })('pub')\n    *\n    * // Will return [{ id: 2, name: 'publisher' }]\n   \n */\n\n\nexport var getSuggestionsFactory = function (_a) {\n  var _b = _a.choices,\n      choices = _b === void 0 ? [] : _b,\n      allowEmpty = _a.allowEmpty,\n      emptyText = _a.emptyText,\n      emptyValue = _a.emptyValue,\n      optionText = _a.optionText,\n      optionValue = _a.optionValue,\n      getChoiceText = _a.getChoiceText,\n      getChoiceValue = _a.getChoiceValue,\n      _c = _a.limitChoicesToValue,\n      limitChoicesToValue = _c === void 0 ? false : _c,\n      _d = _a.matchSuggestion,\n      matchSuggestion = _d === void 0 ? defaultMatchSuggestion(getChoiceText) : _d,\n      selectedItem = _a.selectedItem,\n      _e = _a.suggestionLimit,\n      suggestionLimit = _e === void 0 ? 0 : _e;\n  return function (filter) {\n    var suggestions = []; // if an item is selected and matches the filter\n\n    if (selectedItem && !Array.isArray(selectedItem) && matchSuggestion(filter, selectedItem)) {\n      if (limitChoicesToValue) {\n        // display only the selected item\n        suggestions = choices.filter(function (choice) {\n          return getChoiceValue(choice) === getChoiceValue(selectedItem);\n        });\n      } else {\n        // ignore the filter to show more choices\n        suggestions = removeAlreadySelectedSuggestions(choices, selectedItem, getChoiceValue);\n      }\n    } else {\n      suggestions = choices.filter(function (choice) {\n        return matchSuggestion(filter, choice);\n      });\n      suggestions = removeAlreadySelectedSuggestions(suggestions, selectedItem, getChoiceValue);\n    }\n\n    suggestions = limitSuggestions(suggestions, suggestionLimit);\n\n    if (allowEmpty) {\n      suggestions = addEmptySuggestion(suggestions, {\n        optionText: optionText,\n        optionValue: optionValue,\n        emptyText: emptyText,\n        emptyValue: emptyValue\n      });\n    }\n\n    return suggestions;\n  };\n};\n/**\n * @example\n *\n * removeAlreadySelectedSuggestions(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n *  [{ id: 1, name: 'foo'}]\n * );\n *\n * // Will return [{ id: 2, name: 'bar' }]\n *\n * @param suggestions List of suggestions\n * @param selectedItems List of selection\n * @param getChoiceValue Converter function from suggestion to value\n */\n\nvar removeAlreadySelectedSuggestions = function (suggestions, selectedItems, getChoiceValue) {\n  if (!selectedItems) {\n    return suggestions;\n  }\n\n  var selectedValues = Array.isArray(selectedItems) ? selectedItems.map(getChoiceValue) : [getChoiceValue(selectedItems)];\n  return suggestions.filter(function (suggestion) {\n    return !selectedValues.includes(getChoiceValue(suggestion));\n  });\n};\n/**\n * @example\n *\n * limitSuggestions(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n *  1\n * );\n *\n * // Will return [{ id: 1, name: 'foo' }]\n *\n * @param suggestions List of suggestions\n * @param limit\n */\n\n\nvar limitSuggestions = function (suggestions, limit) {\n  if (limit === void 0) {\n    limit = 0;\n  }\n\n  return Number.isInteger(limit) && limit > 0 ? suggestions.slice(0, limit) : suggestions;\n};\n/**\n * addEmptySuggestion(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n * );\n *\n * // Will return [{ id: null, name: '' }, { id: 1, name: 'foo' }, , { id: 2, name: 'bar' }]\n *\n * @param suggestions List of suggestions\n * @param options\n */\n\n\nvar addEmptySuggestion = function (suggestions, _a) {\n  var _b = _a.optionText,\n      optionText = _b === void 0 ? 'name' : _b,\n      _c = _a.optionValue,\n      optionValue = _c === void 0 ? 'id' : _c,\n      _d = _a.emptyText,\n      emptyText = _d === void 0 ? '' : _d,\n      _e = _a.emptyValue,\n      emptyValue = _e === void 0 ? null : _e;\n  var newSuggestions = suggestions;\n  var emptySuggestion = {};\n  set(emptySuggestion, optionValue, emptyValue);\n\n  if (typeof optionText === 'string') {\n    set(emptySuggestion, optionText, emptyText);\n  }\n\n  return [].concat(emptySuggestion, newSuggestions);\n};","map":null,"metadata":{},"sourceType":"module"}