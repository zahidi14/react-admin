{"ast":null,"code":"import { useMemo } from 'react';\nimport get from 'lodash/get';\nimport { useGetMany } from '../../dataProvider';\n/**\n * Hook that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * @example\n *\n * const { ids, data, error, loaded, loading, referenceBasePath } = useReferenceArrayFieldController({\n *      basePath: 'resource';\n *      record: { referenceIds: ['id1', 'id2']};\n *      reference: 'reference';\n *      resource: 'resource';\n *      source: 'referenceIds';\n * });\n *\n * @param {Object} option\n * @param {boolean} option.allowEmpty do we allow for no referenced record (default to false)\n * @param {string} option.basePath basepath to current resource\n * @param {string | false} option.linkType The type of the link toward the referenced record. edit, show of false for no link (default to edit)\n * @param {Object} option.record The The current resource record\n * @param {string} option.reference The linked resource name\n * @param {string} option.resource The current resource name\n * @param {string} option.source The key of the linked resource identifier\n *\n * @returns {ReferenceProps} The reference props\n */\n\nvar useReferenceArrayFieldController = function (_a) {\n  var resource = _a.resource,\n      reference = _a.reference,\n      basePath = _a.basePath,\n      record = _a.record,\n      source = _a.source;\n  var ids = get(record, source) || [];\n\n  var _b = useGetMany(reference, ids),\n      data = _b.data,\n      error = _b.error,\n      loading = _b.loading,\n      loaded = _b.loaded;\n\n  var referenceBasePath = basePath.replace(resource, reference); // FIXME obviously very weak\n\n  return {\n    ids: ids,\n    data: useMemo(function () {\n      return indexById(data);\n    }, [data]),\n    error: error,\n    loaded: loaded,\n    loading: loading,\n    referenceBasePath: referenceBasePath\n  };\n};\n\nvar indexById = function (records) {\n  return records.filter(function (r) {\n    return typeof r !== 'undefined';\n  }).reduce(function (prev, current) {\n    prev[current.id] = current;\n    return prev;\n  }, {});\n};\n\nexport default useReferenceArrayFieldController;","map":null,"metadata":{},"sourceType":"module"}