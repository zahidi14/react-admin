{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, FormSpy } from 'react-final-form';\nimport classnames from 'classnames';\nimport { makeStyles } from '@material-ui/core/styles';\nimport lodashSet from 'lodash/set';\nimport lodashGet from 'lodash/get';\nimport FilterFormInput from './FilterFormInput';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    form: {\n      marginTop: -theme.spacing(2),\n      paddingTop: 0,\n      display: 'flex',\n      alignItems: 'flex-end',\n      flexWrap: 'wrap',\n      minHeight: theme.spacing(9.5)\n    },\n    clearFix: {\n      clear: 'right'\n    }\n  };\n});\n\nvar sanitizeRestProps = function (_a) {\n  var anyTouched = _a.anyTouched,\n      asyncValidate = _a.asyncValidate,\n      asyncValidating = _a.asyncValidating,\n      autofill = _a.autofill,\n      blur = _a.blur,\n      change = _a.change,\n      clearAsyncError = _a.clearAsyncError,\n      clearFields = _a.clearFields,\n      clearSubmit = _a.clearSubmit,\n      clearSubmitErrors = _a.clearSubmitErrors,\n      destroy = _a.destroy,\n      dirty = _a.dirty,\n      dirtyFields = _a.dirtyFields,\n      dirtyFieldsSinceLastSubmit = _a.dirtyFieldsSinceLastSubmit,\n      dirtySinceLastSubmit = _a.dirtySinceLastSubmit,\n      dispatch = _a.dispatch,\n      displayedFilters = _a.displayedFilters,\n      errors = _a.errors,\n      filters = _a.filters,\n      filterValues = _a.filterValues,\n      form = _a.form,\n      handleSubmit = _a.handleSubmit,\n      hasSubmitErrors = _a.hasSubmitErrors,\n      hasValidationErrors = _a.hasValidationErrors,\n      hideFilter = _a.hideFilter,\n      initialize = _a.initialize,\n      initialized = _a.initialized,\n      initialValues = _a.initialValues,\n      invalid = _a.invalid,\n      modified = _a.modified,\n      pristine = _a.pristine,\n      pure = _a.pure,\n      reset = _a.reset,\n      resetSection = _a.resetSection,\n      save = _a.save,\n      setFilter = _a.setFilter,\n      setFilters = _a.setFilters,\n      submit = _a.submit,\n      submitAsSideEffect = _a.submitAsSideEffect,\n      submitError = _a.submitError,\n      submitErrors = _a.submitErrors,\n      submitFailed = _a.submitFailed,\n      submitSucceeded = _a.submitSucceeded,\n      submitting = _a.submitting,\n      touch = _a.touch,\n      touched = _a.touched,\n      triggerSubmit = _a.triggerSubmit,\n      untouch = _a.untouch,\n      valid = _a.valid,\n      validate = _a.validate,\n      validating = _a.validating,\n      values = _a.values,\n      visited = _a.visited,\n      __versions = _a.__versions,\n      props = __rest(_a, [\"anyTouched\", \"asyncValidate\", \"asyncValidating\", \"autofill\", \"blur\", \"change\", \"clearAsyncError\", \"clearFields\", \"clearSubmit\", \"clearSubmitErrors\", \"destroy\", \"dirty\", \"dirtyFields\", \"dirtyFieldsSinceLastSubmit\", \"dirtySinceLastSubmit\", \"dispatch\", \"displayedFilters\", \"errors\", \"filters\", \"filterValues\", \"form\", \"handleSubmit\", \"hasSubmitErrors\", \"hasValidationErrors\", \"hideFilter\", \"initialize\", \"initialized\", \"initialValues\", \"invalid\", \"modified\", \"pristine\", \"pure\", \"reset\", \"resetSection\", \"save\", \"setFilter\", \"setFilters\", \"submit\", \"submitAsSideEffect\", \"submitError\", \"submitErrors\", \"submitFailed\", \"submitSucceeded\", \"submitting\", \"touch\", \"touched\", \"triggerSubmit\", \"untouch\", \"valid\", \"validate\", \"validating\", \"values\", \"visited\", \"__versions\"]);\n\n  return props;\n};\n\nexport var FilterForm = function (_a) {\n  var _b = _a.classes,\n      classes = _b === void 0 ? {} : _b,\n      className = _a.className,\n      resource = _a.resource,\n      margin = _a.margin,\n      variant = _a.variant,\n      filters = _a.filters,\n      displayedFilters = _a.displayedFilters,\n      hideFilter = _a.hideFilter,\n      initialValues = _a.initialValues,\n      rest = __rest(_a, [\"classes\", \"className\", \"resource\", \"margin\", \"variant\", \"filters\", \"displayedFilters\", \"hideFilter\", \"initialValues\"]);\n\n  useEffect(function () {\n    filters.forEach(function (filter) {\n      if (filter.props.alwaysOn && filter.props.defaultValue) {\n        throw new Error('Cannot use alwaysOn and defaultValue on a filter input. Please set the filterDefaultValues props on the <List> element instead.');\n      }\n    });\n  }, [filters]);\n\n  var getShownFilters = function () {\n    return filters.filter(function (filterElement) {\n      return filterElement.props.alwaysOn || displayedFilters[filterElement.props.source] || typeof lodashGet(initialValues, filterElement.props.source) !== 'undefined';\n    });\n  };\n\n  var handleHide = useCallback(function (event) {\n    return hideFilter(event.currentTarget.dataset.key);\n  }, [hideFilter]);\n  return React.createElement(\"form\", __assign({\n    className: classnames(className, classes.form)\n  }, sanitizeRestProps(rest), {\n    onSubmit: handleSubmit\n  }), getShownFilters().map(function (filterElement) {\n    return React.createElement(FilterFormInput, {\n      key: filterElement.props.source,\n      filterElement: filterElement,\n      handleHide: handleHide,\n      resource: resource,\n      margin: margin,\n      variant: variant\n    });\n  }), React.createElement(\"div\", {\n    className: classes.clearFix\n  }));\n};\n\nvar handleSubmit = function (event) {\n  event.preventDefault();\n  return false;\n};\n\nFilterForm.propTypes = {\n  resource: PropTypes.string.isRequired,\n  filters: PropTypes.arrayOf(PropTypes.node).isRequired,\n  displayedFilters: PropTypes.object.isRequired,\n  hideFilter: PropTypes.func.isRequired,\n  initialValues: PropTypes.object,\n  classes: PropTypes.object,\n  className: PropTypes.string\n};\nexport var mergeInitialValuesWithDefaultValues = function (_a) {\n  var initialValues = _a.initialValues,\n      filters = _a.filters;\n  return __assign({}, filters.filter(function (filterElement) {\n    return filterElement.props.alwaysOn && filterElement.props.defaultValue;\n  }).reduce(function (acc, filterElement) {\n    return lodashSet(__assign({}, acc), filterElement.props.source, filterElement.props.defaultValue);\n  }, {}), initialValues);\n};\n\nvar EnhancedFilterForm = function (_a) {\n  var classesOverride = _a.classes,\n      props = __rest(_a, [\"classes\"]);\n\n  var classes = useStyles({\n    classes: classesOverride\n  });\n  var mergedInitialValuesWithDefaultValues = mergeInitialValuesWithDefaultValues(props);\n\n  var initialValues = props.initialValues,\n      rest = __rest(props, [\"initialValues\"]);\n\n  return React.createElement(Form, {\n    onSubmit: handleFinalFormSubmit,\n    initialValues: mergedInitialValuesWithDefaultValues,\n    render: function (formProps) {\n      return React.createElement(React.Fragment, null, React.createElement(FormSpy, {\n        subscription: FormSpySubscription,\n        onChange: function (_a) {\n          var pristine = _a.pristine,\n              values = _a.values;\n\n          if (pristine) {\n            return;\n          }\n\n          props && props.setFilters(values);\n        }\n      }), React.createElement(FilterForm, __assign({\n        classes: classes\n      }, formProps, rest)));\n    }\n  });\n};\n\nvar handleFinalFormSubmit = function () {}; // Options to instruct the FormSpy that it should only listen to the values and pristine changes\n\n\nvar FormSpySubscription = {\n  values: true,\n  pristine: true\n};\nexport default EnhancedFilterForm;","map":null,"metadata":{},"sourceType":"module"}