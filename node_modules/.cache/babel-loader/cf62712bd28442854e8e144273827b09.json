{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useEffect, useState } from 'react';\nimport inflection from 'inflection';\nimport { useEditController, InferredElement, getElementsFromRecords } from 'ra-core';\nimport { EditView } from './Edit';\nimport editFieldTypes from './editFieldTypes';\n\nvar EditViewGuesser = function (props) {\n  var record = props.record,\n      resource = props.resource;\n\n  var _a = useState(null),\n      inferredChild = _a[0],\n      setInferredChild = _a[1];\n\n  useEffect(function () {\n    if (record && !inferredChild) {\n      var inferredElements = getElementsFromRecords([record], editFieldTypes);\n      var inferredChild_1 = new InferredElement(editFieldTypes.form, null, inferredElements);\n      process.env.NODE_ENV !== 'production' && // eslint-disable-next-line no-console\n      console.log(\"Guessed Edit:\\n\\nexport const \" + inflection.capitalize(inflection.singularize(resource)) + \"Edit = props => (\\n    <Edit {...props}>\\n\" + inferredChild_1.getRepresentation() + \"\\n    </Edit>\\n);\");\n      setInferredChild(inferredChild_1.getElement());\n    }\n  }, [record, inferredChild, resource]);\n  return React.createElement(EditView, __assign({}, props), inferredChild);\n};\n\nEditViewGuesser.propTypes = EditView.propTypes;\n\nvar EditGuesser = function (props) {\n  return React.createElement(EditViewGuesser, __assign({}, props, useEditController(props)));\n};\n\nexport default EditGuesser;","map":null,"metadata":{},"sourceType":"module"}