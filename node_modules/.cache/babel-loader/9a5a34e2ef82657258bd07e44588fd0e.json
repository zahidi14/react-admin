{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useEffect, useRef, useState, useCallback } from 'react';\nimport debounce from 'lodash/debounce';\n\nvar defaultFilterToQuery = function (v) {\n  return {\n    q: v\n  };\n};\n\nvar emptyFilter = {};\n/**\n * @name setFilter\n * @function\n * @param {string} the value\n */\n\n/**\n * @typedef FilterProps\n * @type {Object}\n * @property {Object} filter: The filter object.\n * @property {setFilter} setFilter: Update the filter with the given string\n */\n\n/**\n * Hooks to provide filter state and setFilter which update the query part of the filter\n *\n * @example\n *\n * const { filter, setFilter } = useFilter({\n *      filterToQuery: v => ({ query: v }),\n *      permanentFilter: { foo: 'bar' },\n *      debounceTime: 500,\n * });\n * // filter inital value:\n * {\n *      query: '',\n *      foo: 'bar'\n * }\n *  // after updating filter\n *  setFilter('needle');\n *  {\n *      query: 'needle',\n *      foo: 'bar'\n *  }\n *\n * @param {Object} option\n * @param {Function} option.filterToQuery Function to convert the filter string to a filter object. Defaults to v => ({ q: v }).\n * @param {Object} option.permanentFilter Permanent filter to be merged with the filter string. Defaults to {}.\n * @param {number} option.debounceTime Time in ms between filter updates - used to debounce the search. Defaults to 500ms.\n *\n * @returns {FilterProps} The filter props\n */\n\nexport default (function (_a) {\n  var _b = _a.filterToQuery,\n      filterToQuery = _b === void 0 ? defaultFilterToQuery : _b,\n      _c = _a.permanentFilter,\n      permanentFilter = _c === void 0 ? emptyFilter : _c,\n      _d = _a.debounceTime,\n      debounceTime = _d === void 0 ? 500 : _d;\n  var permanentFilterProp = useRef(permanentFilter);\n  var latestValue = useRef();\n\n  var _e = useState(__assign({}, permanentFilter, filterToQuery(''))),\n      filter = _e[0],\n      setFilterValue = _e[1];\n\n  useEffect(function () {\n    if (permanentFilterProp.current !== permanentFilter) {\n      permanentFilterProp.current = permanentFilter;\n      setFilterValue(__assign({}, permanentFilter, filterToQuery(latestValue.current)));\n    }\n  }, [permanentFilter, permanentFilterProp, filterToQuery]);\n  var setFilter = useCallback(debounce(function (value) {\n    setFilterValue(__assign({}, permanentFilter, filterToQuery(value)));\n    latestValue.current = value;\n  }, debounceTime), []);\n  return {\n    filter: filter,\n    setFilter: setFilter\n  };\n});","map":null,"metadata":{},"sourceType":"module"}