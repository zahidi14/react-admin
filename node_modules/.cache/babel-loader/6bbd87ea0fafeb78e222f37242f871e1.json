{"ast":null,"code":"import { useState, useRef, useEffect, useCallback } from 'react';\nimport isEqual from 'lodash/isEqual'; // thanks Kent C Dodds for the following helpers\n\nexport function useSafeSetState(initialState) {\n  var _a = useState(initialState),\n      state = _a[0],\n      setState = _a[1];\n\n  var mountedRef = useRef(false);\n  useEffect(function () {\n    mountedRef.current = true;\n    return function () {\n      return mountedRef.current = false;\n    };\n  }, []);\n  var safeSetState = useCallback(function (args) {\n    return mountedRef.current && setState(args);\n  }, [mountedRef, setState]);\n  return [state, safeSetState];\n}\nexport function usePrevious(value) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}\nexport function useDeepCompareEffect(callback, inputs) {\n  var cleanupRef = useRef();\n  useEffect(function () {\n    if (!isEqual(previousInputs, inputs)) {\n      cleanupRef.current = callback();\n    }\n\n    return cleanupRef.current;\n  });\n  var previousInputs = usePrevious(inputs);\n}\nexport function useTimeout(ms) {\n  if (ms === void 0) {\n    ms = 0;\n  }\n\n  var _a = useState(false),\n      ready = _a[0],\n      setReady = _a[1];\n\n  useEffect(function () {\n    var timer = setTimeout(function () {\n      setReady(true);\n    }, ms);\n    return function () {\n      clearTimeout(timer);\n    };\n  }, [ms]);\n  return ready;\n}","map":null,"metadata":{},"sourceType":"module"}