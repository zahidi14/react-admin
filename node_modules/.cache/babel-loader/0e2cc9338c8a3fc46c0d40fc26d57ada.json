{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, Select, MenuItem, InputLabel, Input, FilledInput, FormHelperText, FormControl, Chip } from '@material-ui/core';\nimport classnames from 'classnames';\nimport { FieldTitle, useInput, useChoices } from 'ra-core';\nimport InputHelperText from './InputHelperText';\n\nvar sanitizeRestProps = function (_a) {\n  var addLabel = _a.addLabel,\n      allowEmpty = _a.allowEmpty,\n      basePath = _a.basePath,\n      choices = _a.choices,\n      classNamInputWithOptionsPropse = _a.classNamInputWithOptionsPropse,\n      componenInputWithOptionsPropst = _a.componenInputWithOptionsPropst,\n      crudGetMInputWithOptionsPropsatching = _a.crudGetMInputWithOptionsPropsatching,\n      crudGetOInputWithOptionsPropsne = _a.crudGetOInputWithOptionsPropsne,\n      defaultValue = _a.defaultValue,\n      filter = _a.filter,\n      filterToQuery = _a.filterToQuery,\n      formClassName = _a.formClassName,\n      initializeForm = _a.initializeForm,\n      input = _a.input,\n      isRequired = _a.isRequired,\n      label = _a.label,\n      limitChoicesToValue = _a.limitChoicesToValue,\n      loaded = _a.loaded,\n      locale = _a.locale,\n      meta = _a.meta,\n      onChange = _a.onChange,\n      options = _a.options,\n      optionValue = _a.optionValue,\n      optionText = _a.optionText,\n      perPage = _a.perPage,\n      record = _a.record,\n      reference = _a.reference,\n      resource = _a.resource,\n      setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      sort = _a.sort,\n      source = _a.source,\n      textAlign = _a.textAlign,\n      translate = _a.translate,\n      translateChoice = _a.translateChoice,\n      validation = _a.validation,\n      rest = __rest(_a, [\"addLabel\", \"allowEmpty\", \"basePath\", \"choices\", \"classNamInputWithOptionsPropse\", \"componenInputWithOptionsPropst\", \"crudGetMInputWithOptionsPropsatching\", \"crudGetOInputWithOptionsPropsne\", \"defaultValue\", \"filter\", \"filterToQuery\", \"formClassName\", \"initializeForm\", \"input\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"loaded\", \"locale\", \"meta\", \"onChange\", \"options\", \"optionValue\", \"optionText\", \"perPage\", \"record\", \"reference\", \"resource\", \"setFilter\", \"setPagination\", \"setSort\", \"sort\", \"source\", \"textAlign\", \"translate\", \"translateChoice\", \"validation\"]);\n\n  return rest;\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {},\n    chips: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    chip: {\n      margin: theme.spacing(1 / 4)\n    },\n    select: {\n      height: 'auto',\n      overflow: 'auto'\n    }\n  };\n});\n/**\n * An Input component for a select box allowing multiple selections, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *    { id: 'programming', name: 'Programming' },\n *    { id: 'lifestyle', name: 'Lifestyle' },\n *    { id: 'photography', name: 'Photography' },\n * ];\n * <SelectArrayInput source=\"tags\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectArrayInput source=\"authors\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.tags.programming' },\n *    { id: 'lifestyle', name: 'myroot.tags.lifestyle' },\n *    { id: 'photography', name: 'myroot.tags.photography' },\n * ];\n */\n\nvar SelectArrayInput = function (_a) {\n  var _b = _a.choices,\n      choices = _b === void 0 ? [] : _b,\n      classesOverride = _a.classes,\n      className = _a.className,\n      format = _a.format,\n      helperText = _a.helperText,\n      label = _a.label,\n      _c = _a.margin,\n      margin = _c === void 0 ? 'dense' : _c,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      onFocus = _a.onFocus,\n      options = _a.options,\n      optionText = _a.optionText,\n      optionValue = _a.optionValue,\n      parse = _a.parse,\n      resource = _a.resource,\n      source = _a.source,\n      translateChoice = _a.translateChoice,\n      validate = _a.validate,\n      _d = _a.variant,\n      variant = _d === void 0 ? 'filled' : _d,\n      rest = __rest(_a, [\"choices\", \"classes\", \"className\", \"format\", \"helperText\", \"label\", \"margin\", \"onBlur\", \"onChange\", \"onFocus\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"source\", \"translateChoice\", \"validate\", \"variant\"]);\n\n  var classes = useStyles({\n    classes: classesOverride\n  });\n\n  var _e = useChoices({\n    optionText: optionText,\n    optionValue: optionValue,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _e.getChoiceText,\n      getChoiceValue = _e.getChoiceValue;\n\n  var _f = useInput(__assign({\n    format: format,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      id = _f.id,\n      input = _f.input,\n      isRequired = _f.isRequired,\n      _g = _f.meta,\n      error = _g.error,\n      touched = _g.touched;\n\n  var renderMenuItemOption = useCallback(function (choice) {\n    return getChoiceText(choice);\n  }, [getChoiceText]);\n  var renderMenuItem = useCallback(function (choice) {\n    return choice ? React.createElement(MenuItem, {\n      key: getChoiceValue(choice),\n      value: getChoiceValue(choice)\n    }, renderMenuItemOption(choice)) : null;\n  }, [getChoiceValue, renderMenuItemOption]);\n  return React.createElement(FormControl, __assign({\n    margin: margin,\n    className: classnames(classes.root, className),\n    error: touched && !!error,\n    variant: variant\n  }, sanitizeRestProps(rest)), React.createElement(InputLabel, {\n    htmlFor: id,\n    shrink: true,\n    variant: variant\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource,\n    isRequired: isRequired\n  })), React.createElement(Select, __assign({\n    autoWidth: true,\n    multiple: true,\n    input: variant === 'standard' ? React.createElement(Input, {\n      id: id\n    }) : React.createElement(FilledInput, {\n      id: id\n    }),\n    error: !!(touched && error),\n    renderValue: function (selected) {\n      return React.createElement(\"div\", {\n        className: classes.chips\n      }, selected.map(function (item) {\n        return choices.find(function (choice) {\n          return getChoiceValue(choice) === item;\n        });\n      }).map(function (item) {\n        return React.createElement(Chip, {\n          key: getChoiceValue(item),\n          label: renderMenuItemOption(item),\n          className: classes.chip\n        });\n      }));\n    },\n    \"data-testid\": \"selectArray\",\n    variant: variant\n  }, input, {\n    value: input.value || []\n  }, options), choices.map(renderMenuItem)), touched && error || helperText ? React.createElement(FormHelperText, null, React.createElement(InputHelperText, {\n    touched: touched,\n    error: error,\n    helperText: helperText\n  })) : null);\n};\n\nSelectArrayInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.object),\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  label: PropTypes.string,\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]).isRequired,\n  optionValue: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nSelectArrayInput.defaultProps = {\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true\n};\nexport default SelectArrayInput;","map":null,"metadata":{},"sourceType":"module"}