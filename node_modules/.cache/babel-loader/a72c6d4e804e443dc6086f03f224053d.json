{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { cloneElement, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { linkToRecord } from 'ra-core';\nimport Link from '../Link';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      marginTop: -theme.spacing(1),\n      marginBottom: -theme.spacing(1)\n    }\n  };\n}); // useful to prevent click bubbling in a datagrid with rowClick\n\nvar stopPropagation = function (e) {\n  return e.stopPropagation();\n};\n\nvar sanitizeRestProps = function (_a) {\n  var currentSort = _a.currentSort,\n      setSort = _a.setSort,\n      loading = _a.loading,\n      loaded = _a.loaded,\n      props = __rest(_a, [\"currentSort\", \"setSort\", \"loading\", \"loaded\"]);\n\n  return props;\n}; // Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\n\n\nvar handleClick = function () {};\n/**\n * Iterator component to be used to display a list of entities, using a single field\n *\n * @example Display all the books by the current author\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, it includes a link to the <Edit> page of the related record\n * (`/books/:id` in the previous example).\n *\n * Set the linkType prop to \"show\" to link to the <Show> page instead.\n *\n * @example\n * <ReferenceManyField reference=\"books\" target=\"author_id\" linkType=\"show\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * You can also prevent `<SingleFieldList>` from adding link to children by setting\n * `linkType` to false.\n *\n * @example\n * <ReferenceManyField reference=\"books\" target=\"author_id\" linkType={false}>\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n */\n\n\nfunction SingleFieldList(_a) {\n  var classesOverride = _a.classes,\n      className = _a.className,\n      ids = _a.ids,\n      data = _a.data,\n      loaded = _a.loaded,\n      resource = _a.resource,\n      basePath = _a.basePath,\n      children = _a.children,\n      linkType = _a.linkType,\n      rest = __rest(_a, [\"classes\", \"className\", \"ids\", \"data\", \"loaded\", \"resource\", \"basePath\", \"children\", \"linkType\"]);\n\n  var classes = useStyles({\n    classes: classesOverride\n  });\n\n  if (loaded === false) {\n    return React.createElement(LinearProgress, null);\n  }\n\n  return React.createElement(\"div\", __assign({\n    className: classnames(classes.root, className)\n  }, sanitizeRestProps(rest)), ids.map(function (id) {\n    var resourceLinkPath = !linkType ? false : linkToRecord(basePath, id, linkType);\n\n    if (resourceLinkPath) {\n      return React.createElement(Link, {\n        className: classes.link,\n        key: id,\n        to: resourceLinkPath,\n        onClick: stopPropagation\n      }, cloneElement(Children.only(children), {\n        record: data[id],\n        resource: resource,\n        basePath: basePath,\n        // Workaround to force ChipField to be clickable\n        onClick: handleClick\n      }));\n    }\n\n    return cloneElement(Children.only(children), {\n      key: id,\n      record: data[id],\n      resource: resource,\n      basePath: basePath\n    });\n  }));\n}\n\nSingleFieldList.propTypes = {\n  basePath: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  data: PropTypes.object,\n  ids: PropTypes.array,\n  linkType: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]).isRequired,\n  resource: PropTypes.string\n};\nSingleFieldList.defaultProps = {\n  classes: {},\n  linkType: 'edit'\n};\nexport default SingleFieldList;","map":null,"metadata":{},"sourceType":"module"}