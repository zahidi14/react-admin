{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useCallback, useMemo, Children } from 'react';\nimport { useSafeSetState } from '../util/hooks';\nimport { TranslationContext } from './TranslationContext';\n/**\n * Creates a translation context, available to its children\n *\n * @example\n *     const MyApp = () => (\n *         <Provider store={store}>\n *             <TranslationProvider i18nProvider={i18nProvider}>\n *                 <!-- Child components go here -->\n *             </TranslationProvider>\n *         </Provider>\n *     );\n */\n\nvar TranslationProvider = function (props) {\n  var i18nProvider = props.i18nProvider,\n      children = props.children;\n\n  var _a = useSafeSetState({\n    locale: i18nProvider ? i18nProvider.getLocale() : 'en',\n    i18nProvider: i18nProvider\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var setLocale = useCallback(function (newLocale) {\n    return setState({\n      locale: newLocale,\n      i18nProvider: i18nProvider\n    });\n  }, [i18nProvider, setState]); // Allow locale modification by including setLocale in the context\n  // This can't be done in the initial state because setState doesn't exist yet\n\n  var value = useMemo(function () {\n    return __assign({}, state, {\n      setLocale: setLocale\n    });\n  }, [setLocale, state]);\n  return React.createElement(TranslationContext.Provider, {\n    value: value\n  }, Children.only(children));\n};\n\nexport default TranslationProvider;","map":null,"metadata":{},"sourceType":"module"}