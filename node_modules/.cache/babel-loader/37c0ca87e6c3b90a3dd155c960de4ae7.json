{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { isValidElement, Children, cloneElement, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps } from 'ra-core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport classnames from 'classnames';\nimport DatagridHeaderCell from './DatagridHeaderCell';\nimport DatagridLoading from './DatagridLoading';\nimport DatagridBody, { PureDatagridBody } from './DatagridBody';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    table: {\n      tableLayout: 'auto'\n    },\n    thead: {},\n    tbody: {},\n    headerRow: {},\n    headerCell: {},\n    checkbox: {},\n    row: {},\n    clickableRow: {\n      cursor: 'pointer'\n    },\n    rowEven: {},\n    rowOdd: {},\n    rowCell: {},\n    expandHeader: {\n      padding: 0,\n      width: theme.spacing(6)\n    },\n    expandIconCell: {\n      width: theme.spacing(6)\n    },\n    expandIcon: {\n      padding: theme.spacing(1),\n      transform: 'rotate(-90deg)',\n      transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest\n      })\n    },\n    expanded: {\n      transform: 'rotate(0deg)'\n    }\n  };\n});\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - rowStyle\n *\n * @example Display all posts as a datagrid\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = (props) => (\n *     <List {...props}>\n *         <Datagrid rowStyle={postRowStyle}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n */\n\nfunction Datagrid(_a) {\n  var classesOverride = _a.classes,\n      props = __rest(_a, [\"classes\"]);\n\n  var classes = useStyles({\n    classes: classesOverride\n  });\n\n  var basePath = props.basePath,\n      _b = props.optimized,\n      optimized = _b === void 0 ? false : _b,\n      _c = props.body,\n      body = _c === void 0 ? optimized ? React.createElement(PureDatagridBody, null) : React.createElement(DatagridBody, null) : _c,\n      children = props.children,\n      className = props.className,\n      currentSort = props.currentSort,\n      data = props.data,\n      expand = props.expand,\n      hasBulkActions = props.hasBulkActions,\n      hover = props.hover,\n      ids = props.ids,\n      loading = props.loading,\n      loaded = props.loaded,\n      onSelect = props.onSelect,\n      onToggleItem = props.onToggleItem,\n      resource = props.resource,\n      rowClick = props.rowClick,\n      rowStyle = props.rowStyle,\n      selectedIds = props.selectedIds,\n      setSort = props.setSort,\n      _d = props.size,\n      size = _d === void 0 ? 'small' : _d,\n      total = props.total,\n      version = props.version,\n      rest = __rest(props, [\"basePath\", \"optimized\", \"body\", \"children\", \"className\", \"currentSort\", \"data\", \"expand\", \"hasBulkActions\", \"hover\", \"ids\", \"loading\", \"loaded\", \"onSelect\", \"onToggleItem\", \"resource\", \"rowClick\", \"rowStyle\", \"selectedIds\", \"setSort\", \"size\", \"total\", \"version\"]);\n\n  var updateSort = useCallback(function (event) {\n    event.stopPropagation();\n    setSort(event.currentTarget.dataset.sort);\n  }, [setSort]);\n  var handleSelectAll = useCallback(function (event) {\n    if (event.target.checked) {\n      onSelect(ids.concat(selectedIds.filter(function (id) {\n        return !ids.includes(id);\n      })));\n    } else {\n      onSelect([]);\n    }\n  }, [ids, onSelect, selectedIds]);\n  /**\n   * if loaded is false, the list displays for the first time, and the dataProvider hasn't answered yet\n   * if loaded is true, the data for the list has at least been returned once by the dataProvider\n   * if loaded is undefined, the Datagrid parent doesn't track loading state (e.g. ReferenceArrayField)\n   */\n\n  if (loaded === false) {\n    return React.createElement(DatagridLoading, {\n      classes: classes,\n      className: className,\n      expand: expand,\n      hasBulkActions: hasBulkActions,\n      nbChildren: React.Children.count(children),\n      size: size\n    });\n  }\n  /**\n   * Once loaded, the data for the list may be empty. Instead of\n   * displaying the table header with zero data rows,\n   * the datagrid displays nothing in this case.\n   */\n\n\n  if (loaded && (ids.length === 0 || total === 0)) {\n    return null;\n  }\n  /**\n   * After the initial load, if the data for the list isn't empty,\n   * and even if the data is refreshing (e.g. after a filter change),\n   * the datagrid displays the current data.\n   */\n\n\n  return React.createElement(Table, __assign({\n    className: classnames(classes.table, className),\n    size: size\n  }, sanitizeListRestProps(rest)), React.createElement(TableHead, {\n    className: classes.thead\n  }, React.createElement(TableRow, {\n    className: classnames(classes.row, classes.headerRow)\n  }, expand && React.createElement(TableCell, {\n    padding: \"none\",\n    className: classes.expandHeader\n  }), hasBulkActions && React.createElement(TableCell, {\n    padding: \"checkbox\"\n  }, React.createElement(Checkbox, {\n    className: \"select-all\",\n    color: \"primary\",\n    checked: selectedIds.length > 0 && ids.length > 0 && ids.every(function (id) {\n      return selectedIds.includes(id);\n    }),\n    onChange: handleSelectAll\n  })), Children.map(children, function (field, index) {\n    return isValidElement(field) ? React.createElement(DatagridHeaderCell, {\n      className: classes.headerCell,\n      currentSort: currentSort,\n      field: field,\n      isSorting: currentSort.field === (field.props.sortBy || field.props.source),\n      key: field.props.source || index,\n      resource: resource,\n      updateSort: updateSort\n    }) : null;\n  }))), cloneElement(body, {\n    basePath: basePath,\n    className: classes.tbody,\n    classes: classes,\n    expand: expand,\n    rowClick: rowClick,\n    data: data,\n    hasBulkActions: hasBulkActions,\n    hover: hover,\n    ids: ids,\n    onToggleItem: onToggleItem,\n    resource: resource,\n    rowStyle: rowStyle,\n    selectedIds: selectedIds,\n    version: version\n  }, children));\n}\n\nDatagrid.propTypes = {\n  basePath: PropTypes.string,\n  body: PropTypes.element,\n  children: PropTypes.node.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  currentSort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.object.isRequired,\n  expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hasBulkActions: PropTypes.bool.isRequired,\n  hover: PropTypes.bool,\n  ids: PropTypes.arrayOf(PropTypes.any).isRequired,\n  loading: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onToggleItem: PropTypes.func,\n  resource: PropTypes.string,\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  rowStyle: PropTypes.func,\n  selectedIds: PropTypes.arrayOf(PropTypes.any).isRequired,\n  setSort: PropTypes.func,\n  total: PropTypes.number,\n  version: PropTypes.number\n};\nDatagrid.defaultProps = {\n  data: {},\n  hasBulkActions: false,\n  ids: [],\n  selectedIds: []\n};\nexport default Datagrid;","map":null,"metadata":{},"sourceType":"module"}