{"ast":null,"code":"/* jshint node:true */\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar helper = require('../core/helper');\n\nvar Handler = function () {\n  function Handler(options) {\n    _classCallCheck(this, Handler);\n\n    this._options = options; //an object of {typeName:(value,index,parent)=>any}\n\n    this._options.typeHandlers = this._options.typeHandlers || {}; //deprecated options\n\n    this._options.handleString = this._options.handleString ? warnDepOp('handleString', this._options.handleString) : this._handleString;\n    this._options.handleNumber = this._options.handleNumber ? warnDepOp('handleNumber', this._options.handleNumber) : this._handleNumber;\n    this._options.handleBoolean = this._options.handleBoolean ? warnDepOp('handleBoolean', this._options.handleBoolean) : this._handleBoolean;\n    this._options.handleDate = this._options.handleDate ? warnDepOp('handleDate', this._options.handleDate) : this._handleDate;\n  }\n  /**\n   * Check if results needing mapping to alternate value\n   *\n   * @returns [{item, value}] result\n   */\n\n\n  _createClass(Handler, [{\n    key: '_setHeaders',\n    value: function _setHeaders(result, item) {\n      var self = this;\n      if (!item) return result;\n      return result.map(function (element) {\n        element.item = element.item ? item + self._options.headerPathString + element.item : item;\n        return element;\n      });\n    }\n  }, {\n    key: 'castValue',\n    value: function castValue(element, item, index, parent) {\n      //cast by matching constructor\n      var types = this._options.typeHandlers;\n\n      for (var type in types) {\n        if (isInstanceOfTypeName(element, type)) {\n          element = types[type].call(types, element, index, parent);\n          break; //first match we move on\n        }\n      }\n\n      return element;\n    }\n  }, {\n    key: 'checkComplex',\n    value: function checkComplex(element, item) {\n      //Check if element is a Date\n      if (helper.isDate(element)) {\n        return [{\n          item: item,\n          value: this._options.handleDate(element, item)\n        }];\n      } //Check if element is an Array\n      else if (helper.isArray(element)) {\n          var resultArray = this._handleArray(element, item);\n\n          return this._setHeaders(resultArray, item);\n        } //Check if element is a Object\n        else if (helper.isObject(element)) {\n            var resultObject = this._handleObject(element);\n\n            return this._setHeaders(resultObject, item);\n          }\n\n      return [{\n        item: item,\n        value: ''\n      }];\n    }\n    /**\n     * Check the element type of the element call the correct handle function\n     *\n     * @param element Element that will be checked\n     * @param item Used to make the headers/path breadcrumb\n     * @returns [{item, value}] result\n     */\n\n  }, {\n    key: 'check',\n    value: function check(element, item, index, parent) {\n      element = this.castValue(element, item, index, parent); //try simple value by highier performance switch\n\n      switch (typeof element === 'undefined' ? 'undefined' : _typeof(element)) {\n        case 'string':\n          return [{\n            item: item,\n            value: this._options.handleString(element, item)\n          }];\n\n        case 'number':\n          return [{\n            item: item,\n            value: this._options.handleNumber(element, item)\n          }];\n\n        case 'boolean':\n          return [{\n            item: item,\n            value: this._options.handleBoolean.bind(this)(element, item)\n          }];\n      }\n\n      return this.checkComplex(element, item);\n    }\n    /**\n     * Handle all Objects\n     *\n     * @param {Object} obj\n     * @returns [{item, value}] result\n     */\n\n  }, {\n    key: '_handleObject',\n    value: function _handleObject(obj) {\n      var result = []; //Look every object props\n\n      for (var prop in obj) {\n        var propData = obj[prop]; //Check the propData type\n\n        var resultCheckType = this.check(propData, prop, prop, obj); //Append to results aka merge results aka array-append-array\n\n        result = result.concat(resultCheckType);\n      }\n\n      return result;\n    }\n    /**\n     * Handle all Arrays, merges arrays with primitive types in a single value\n     *\n     * @param {Array} array\n     * @returns [{item, value}] result\n     */\n\n  }, {\n    key: '_handleArray',\n    value: function _handleArray(array) {\n      var self = this;\n      var result = [];\n      var firstElementWithoutItem;\n\n      for (var aIndex = 0; aIndex < array.length; ++aIndex) {\n        var element = array[aIndex]; //Check the propData type\n\n        var resultCheckType = self.check(element, null, aIndex, array); //Check for results without itens, merge all itens with the first occurrence\n\n        if (resultCheckType.length === 0) continue;\n        var firstResult = resultCheckType[0];\n\n        if (!firstResult.item && firstElementWithoutItem !== undefined) {\n          firstElementWithoutItem.value += self._options.arrayPathString + firstResult.value;\n          continue;\n        } else if (resultCheckType.length > 0 && !firstResult.item && firstElementWithoutItem === undefined) {\n          firstElementWithoutItem = firstResult;\n        } //Append to results\n\n\n        result = result.concat(resultCheckType);\n      }\n\n      return result;\n    }\n    /**\n     * Handle all Boolean variables, can be replaced with options.handleBoolean\n     *\n     * @param {Boolean} boolean\n     * @returns {String} result\n     */\n\n  }, {\n    key: '_handleBoolean',\n    value: function _handleBoolean(boolean) {\n      var result; //Check for booolean options\n\n      if (boolean) {\n        result = this._options.booleanTrueString || 'true';\n      } else {\n        result = this._options.booleanFalseString || 'false';\n      }\n\n      return result;\n    }\n    /**\n     * Handle all String variables, can be replaced with options.handleString\n     *\n     * @param {String} string\n     * @returns {String} string\n     */\n\n  }, {\n    key: '_handleString',\n    value: function _handleString(string) {\n      return string;\n    }\n    /**\n     * Handle all Number variables, can be replaced with options.handleNumber\n     *\n     * @param {Number} number\n     * @returns {Number} number\n     */\n\n  }, {\n    key: '_handleNumber',\n    value: function _handleNumber(number) {\n      return number;\n    }\n    /**\n     * Handle all Date variables, can be replaced with options.handleDate\n     *\n     * @param {Date} number\n     * @returns {string} result\n     */\n\n  }, {\n    key: '_handleDate',\n    value: function _handleDate(date) {\n      return date.toLocaleDateString();\n    }\n  }]);\n\n  return Handler;\n}();\n\nmodule.exports = Handler;\n\nfunction warnDepOp(optionName, backOut) {\n  console.warn(\"[jsonexport]: option \" + optionName + \" has been deprecated. Use option.typeHandlers\");\n  return backOut;\n}\n\nvar globalScope = typeof window === \"undefined\" ? global : window;\n\nfunction isInstanceOfTypeName(element, typeName) {\n  if (element instanceof globalScope[typeName]) {\n    return true; //Buffer and complex objects\n  } //literals in javascript cannot be checked by instance of\n\n\n  switch (typeof element === 'undefined' ? 'undefined' : _typeof(element)) {\n    case 'string':\n      return typeName === \"String\";\n\n    case 'boolean':\n      return typeName === \"Boolean\";\n\n    case 'number':\n      return typeName === \"Number\";\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"script"}