{"ast":null,"code":"import { useEffect } from 'react';\nimport useGetPermissions from './useGetPermissions';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n/**\n * Hook for getting user permissions\n *\n * Calls the authProvider.getPrmissions() method asynchronously.\n * If the authProvider returns a rejected promise, returns empty permissions.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false }\n * - success: { permissions: [any], loading: false, loaded: true }\n * - error: { error: [error from provider], loading: false, loaded: true }\n *\n * Useful to enable features based on user permissions\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @returns The current auth check state. Destructure as { permissions, error, loading, loaded }.\n *\n * @example\n *     import { usePermissions } from 'react-admin';\n *\n *     const PostDetail = props => {\n *         const { loaded, permissions } = usePermissions();\n *         if (loaded && permissions == 'editor') {\n *             return <PostEdit {...props} />\n *         } else {\n *             return <PostShow {...props} />\n *         }\n *     };\n */\n\nvar usePermissions = function (params) {\n  if (params === void 0) {\n    params = emptyParams;\n  }\n\n  var _a = useSafeSetState({\n    loading: true,\n    loaded: false\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var getPermissions = useGetPermissions();\n  useEffect(function () {\n    getPermissions(params).then(function (permissions) {\n      setState({\n        loading: false,\n        loaded: true,\n        permissions: permissions\n      });\n    }).catch(function (error) {\n      setState({\n        loading: false,\n        loaded: true,\n        error: error\n      });\n    });\n  }, [getPermissions, params, setState]);\n  return state;\n};\n\nexport default usePermissions;","map":null,"metadata":{},"sourceType":"module"}