{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\nimport InputHelperText from './InputHelperText';\nimport sanitizeRestProps from './sanitizeRestProps';\n\nvar convertStringToNumber = function (value) {\n  var float = parseFloat(value);\n  return isNaN(float) ? null : float;\n};\n/**\n * An Input component for a number\n *\n * @example\n * <NumberInput source=\"nb_views\" />\n *\n * You can customize the `step` props (which defaults to \"any\")\n * @example\n * <NumberInput source=\"nb_views\" step={1} />\n *\n * The object passed as `options` props is passed to the material-ui <TextField> component\n */\n\n\nvar NumberInput = function (_a) {\n  var format = _a.format,\n      helperText = _a.helperText,\n      label = _a.label,\n      _b = _a.margin,\n      margin = _b === void 0 ? 'dense' : _b,\n      onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      onChange = _a.onChange,\n      options = _a.options,\n      _c = _a.parse,\n      parse = _c === void 0 ? convertStringToNumber : _c,\n      resource = _a.resource,\n      source = _a.source,\n      step = _a.step,\n      validate = _a.validate,\n      _d = _a.variant,\n      variant = _d === void 0 ? 'filled' : _d,\n      overrideInputProps = _a.inputProps,\n      rest = __rest(_a, [\"format\", \"helperText\", \"label\", \"margin\", \"onBlur\", \"onFocus\", \"onChange\", \"options\", \"parse\", \"resource\", \"source\", \"step\", \"validate\", \"variant\", \"inputProps\"]);\n\n  var _e = useInput(__assign({\n    format: format,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    type: 'number',\n    validate: validate\n  }, rest)),\n      id = _e.id,\n      input = _e.input,\n      isRequired = _e.isRequired,\n      _f = _e.meta,\n      error = _f.error,\n      touched = _f.touched;\n\n  var inputProps = __assign({}, overrideInputProps, {\n    step: step\n  });\n\n  return React.createElement(TextField, __assign({\n    id: id\n  }, input, {\n    variant: variant,\n    error: !!(touched && error),\n    helperText: touched && error || helperText ? React.createElement(InputHelperText, {\n      touched: touched,\n      error: error,\n      helperText: helperText\n    }) : null,\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    margin: margin,\n    inputProps: inputProps\n  }, options, sanitizeRestProps(rest)));\n};\n\nNumberInput.propTypes = {\n  label: PropTypes.string,\n  options: PropTypes.object,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nNumberInput.defaultProps = {\n  options: {},\n  step: 'any',\n  textAlign: 'right'\n};\nexport default NumberInput;","map":null,"metadata":{},"sourceType":"module"}