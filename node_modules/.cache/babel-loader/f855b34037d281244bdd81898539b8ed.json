{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport classNames from 'classnames';\nimport MuiAppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { toggleSidebar } from 'ra-core';\nimport LoadingIndicator from './LoadingIndicator';\nimport DefaultUserMenu from './UserMenu';\nimport HideOnScroll from './HideOnScroll';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    toolbar: {\n      paddingRight: 24\n    },\n    menuButton: {\n      marginLeft: '0.5em',\n      marginRight: '0.5em'\n    },\n    menuButtonIconClosed: {\n      transition: theme.transitions.create(['transform'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      transform: 'rotate(0deg)'\n    },\n    menuButtonIconOpen: {\n      transition: theme.transitions.create(['transform'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      transform: 'rotate(180deg)'\n    },\n    title: {\n      flex: 1,\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden'\n    }\n  };\n});\n\nvar AppBar = function (_a) {\n  var children = _a.children,\n      classesOverride = _a.classes,\n      className = _a.className,\n      logo = _a.logo,\n      logout = _a.logout,\n      open = _a.open,\n      title = _a.title,\n      userMenu = _a.userMenu,\n      rest = __rest(_a, [\"children\", \"classes\", \"className\", \"logo\", \"logout\", \"open\", \"title\", \"userMenu\"]);\n\n  var classes = useStyles({\n    classes: classesOverride\n  });\n  var dispatch = useDispatch();\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('xs');\n  });\n  return React.createElement(HideOnScroll, null, React.createElement(MuiAppBar, __assign({\n    className: className,\n    color: \"secondary\"\n  }, rest), React.createElement(Toolbar, {\n    disableGutters: true,\n    variant: isXSmall ? 'regular' : 'dense',\n    className: classes.toolbar\n  }, React.createElement(IconButton, {\n    color: \"inherit\",\n    \"aria-label\": \"open drawer\",\n    onClick: function () {\n      return dispatch(toggleSidebar());\n    },\n    className: classNames(classes.menuButton)\n  }, React.createElement(MenuIcon, {\n    classes: {\n      root: open ? classes.menuButtonIconOpen : classes.menuButtonIconClosed\n    }\n  })), Children.count(children) === 0 ? React.createElement(Typography, {\n    variant: \"h6\",\n    color: \"inherit\",\n    className: classes.title,\n    id: \"react-admin-title\"\n  }) : children, React.createElement(LoadingIndicator, null), cloneElement(userMenu, {\n    logout: logout\n  }))));\n};\n\nAppBar.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  logout: PropTypes.element,\n  open: PropTypes.bool,\n  userMenu: PropTypes.element\n};\nAppBar.defaultProps = {\n  userMenu: React.createElement(DefaultUserMenu, null)\n};\nexport default AppBar;","map":null,"metadata":{},"sourceType":"module"}