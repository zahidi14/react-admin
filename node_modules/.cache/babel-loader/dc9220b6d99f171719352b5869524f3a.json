{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React from 'react';\nimport useDataProvider from './useDataProviderWithDeclarativeSideEffects';\n/**\n * Higher-order component for fetching the dataProvider\n *\n * Injects a dataProvider object, which behaves just like the real dataProvider\n * (same methods returning a Promise). But it's actually a Proxy object, which\n * dispatches Redux actions along the process. The benefit is that react-admin\n * tracks the loading state when using this hook, and stores results in the\n * Redux store for future use.\n *\n * In addition to the 2 usual parameters of the dataProvider methods (resource,\n * payload), the Proxy supports a third parameter for every call. It's an\n * object literal which may contain side effects, or make the action optimistic\n * (with undoable: true).\n *\n * @see useDataProvider\n *\n * @example\n *\n * import { withDataProvider, showNotification } from 'react-admin';\n *\n * class PostList extends Component {\n *     state = {\n *         posts: [],\n *     }\n *\n *     componentDidMount() {\n *         const { dataProvider, dispatch } = this.props;\n *         dataProvider.getList('posts', { filter: { status: 'pending' }})\n *            .then(({ data: posts }) => this.setState({ posts }))\n *            .catch(error => dispatch(showNotification(error.message, 'error')))\n *     }\n *\n *     render() {\n *         const { posts } = this.state;\n *         return (\n *            <Fragment>\n *                {posts.map((post, key) => <PostDetail post={post} key={key} />)}\n *            </Fragment>\n *         );\n *     }\n * }\n *\n * PostList.propTypes = {\n *     dataProvider: PropTypes.func.isRequired,\n * };\n *\n * export default withDataProvider(PostList);\n */\n\nvar withDataProvider = function (Component) {\n  return function (props) {\n    return React.createElement(Component, __assign({}, props, {\n      dataProvider: useDataProvider()\n    }));\n  };\n};\n\nexport default withDataProvider;","map":null,"metadata":{},"sourceType":"module"}