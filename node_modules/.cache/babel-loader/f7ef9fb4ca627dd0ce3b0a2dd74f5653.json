{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FieldTitle, useInput } from 'ra-core';\nimport defaultSanitizeRestProps from './sanitizeRestProps';\nimport CheckboxGroupInputItem from './CheckboxGroupInputItem';\nimport InputHelperText from './InputHelperText';\n\nvar sanitizeRestProps = function (_a) {\n  var setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      rest = __rest(_a, [\"setFilter\", \"setPagination\", \"setSort\"]);\n\n  return defaultSanitizeRestProps(rest);\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {},\n    label: {\n      transform: 'translate(0, 8px) scale(0.75)',\n      transformOrigin: \"top \" + (theme.direction === 'ltr' ? 'left' : 'right')\n    }\n  };\n});\n/**\n * An Input component for a checkbox group, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * The expected input must be an array of identifiers (e.g. [12, 31]) which correspond to\n * the 'optionValue' of 'choices' attribute objects.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *     { id: 12, name: 'Ray Hakt' },\n *     { id: 31, name: 'Ann Gullar' },\n *     { id: 42, name: 'Sean Phonee' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi' },\n *    { _id: 456, full_name: 'Jane Austen' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.category.programming' },\n *    { id: 'lifestyle', name: 'myroot.category.lifestyle' },\n *    { id: 'photography', name: 'myroot.category.photography' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <CheckboxGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <Checkbox> components\n */\n\nvar CheckboxGroupInput = function (_a) {\n  var _b = _a.choices,\n      choices = _b === void 0 ? [] : _b,\n      format = _a.format,\n      helperText = _a.helperText,\n      label = _a.label,\n      _c = _a.margin,\n      margin = _c === void 0 ? 'dense' : _c,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      onFocus = _a.onFocus,\n      optionText = _a.optionText,\n      optionValue = _a.optionValue,\n      options = _a.options,\n      parse = _a.parse,\n      resource = _a.resource,\n      row = _a.row,\n      source = _a.source,\n      translate = _a.translate,\n      translateChoice = _a.translateChoice,\n      validate = _a.validate,\n      rest = __rest(_a, [\"choices\", \"format\", \"helperText\", \"label\", \"margin\", \"onBlur\", \"onChange\", \"onFocus\", \"optionText\", \"optionValue\", \"options\", \"parse\", \"resource\", \"row\", \"source\", \"translate\", \"translateChoice\", \"validate\"]);\n\n  var classes = useStyles({});\n\n  var _d = useInput(__assign({\n    format: format,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      id = _d.id,\n      _e = _d.input,\n      finalFormOnChange = _e.onChange,\n      finalFormOnBlur = _e.onBlur,\n      value = _e.value,\n      isRequired = _d.isRequired,\n      _f = _d.meta,\n      error = _f.error,\n      touched = _f.touched;\n\n  var handleCheck = useCallback(function (event, isChecked) {\n    var newValue;\n\n    try {\n      // try to convert string value to number, e.g. '123'\n      newValue = JSON.parse(event.target.value);\n    } catch (e) {\n      // impossible to convert value, e.g. 'abc'\n      newValue = event.target.value;\n    }\n\n    if (isChecked) {\n      finalFormOnChange((value || []).concat([newValue]));\n    } else {\n      finalFormOnChange(value.filter(function (v) {\n        return v != newValue;\n      })); // eslint-disable-line eqeqeq\n    }\n\n    finalFormOnBlur(); // HACK: See https://github.com/final-form/react-final-form/issues/365#issuecomment-515045503\n  }, [finalFormOnChange, finalFormOnBlur, value]);\n  return React.createElement(FormControl, __assign({\n    component: \"fieldset\",\n    margin: margin,\n    error: touched && !!error\n  }, sanitizeRestProps(rest)), React.createElement(FormLabel, {\n    component: \"legend\",\n    className: classes.label\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource,\n    isRequired: isRequired\n  })), React.createElement(FormGroup, {\n    row: row\n  }, choices.map(function (choice) {\n    return React.createElement(CheckboxGroupInputItem, {\n      key: get(choice, optionValue),\n      choice: choice,\n      id: id,\n      onChange: handleCheck,\n      options: options,\n      optionText: optionText,\n      optionValue: optionValue,\n      translateChoice: translateChoice,\n      value: value\n    });\n  })), touched && error || helperText ? React.createElement(FormHelperText, null, React.createElement(InputHelperText, {\n    touched: touched,\n    error: error,\n    helperText: helperText\n  })) : null);\n};\n\nCheckboxGroupInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n  className: PropTypes.string,\n  label: PropTypes.string,\n  source: PropTypes.string,\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  row: PropTypes.bool,\n  resource: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nCheckboxGroupInput.defaultProps = {\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true,\n  fullWidth: true,\n  row: true\n};\nexport default CheckboxGroupInput;","map":null,"metadata":{},"sourceType":"module"}