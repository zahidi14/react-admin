{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useState, useEffect } from 'react';\nimport inflection from 'inflection';\nimport { useListController, getElementsFromRecords, InferredElement } from 'ra-core';\nimport { ListView } from './List';\nimport listFieldTypes from './listFieldTypes';\n\nvar ListViewGuesser = function (props) {\n  var ids = props.ids,\n      data = props.data,\n      resource = props.resource;\n\n  var _a = useState(null),\n      inferredChild = _a[0],\n      setInferredChild = _a[1];\n\n  useEffect(function () {\n    if (ids.length > 0 && data && !inferredChild) {\n      var inferredElements = getElementsFromRecords(ids.map(function (id) {\n        return data[id];\n      }), listFieldTypes);\n      var inferredChild_1 = new InferredElement(listFieldTypes.table, null, inferredElements);\n      process.env.NODE_ENV !== 'production' && // eslint-disable-next-line no-console\n      console.log(\"Guessed List:\\n\\nexport const \" + inflection.capitalize(inflection.singularize(resource)) + \"List = props => (\\n    <List {...props}>\\n\" + inferredChild_1.getRepresentation() + \"\\n    </List>\\n);\");\n      setInferredChild(inferredChild_1.getElement());\n    }\n  }, [data, ids, inferredChild, resource]);\n  return React.createElement(ListView, __assign({}, props), inferredChild);\n};\n\nListViewGuesser.propTypes = ListView.propTypes;\n\nvar ListGuesser = function (props) {\n  return React.createElement(ListViewGuesser, __assign({}, props, useListController(props)));\n};\n\nexport default ListGuesser;","map":null,"metadata":{},"sourceType":"module"}