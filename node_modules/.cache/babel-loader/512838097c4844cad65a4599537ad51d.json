{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useCallback, useState, useMemo } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { parse, stringify } from 'query-string';\nimport lodashDebounce from 'lodash/debounce';\nimport pickBy from 'lodash/pickBy';\nimport queryReducer, { SET_FILTER, SET_PAGE, SET_PER_PAGE, SET_SORT, SORT_ASC } from '../reducer/admin/resource/list/queryReducer';\nimport { changeListParams } from '../actions/listActions';\nimport removeEmpty from '../util/removeEmpty';\nimport removeKey from '../util/removeKey';\nimport { useHistory } from 'react-router-dom';\nvar emptyObject = {};\nvar defaultSort = {\n  field: 'id',\n  order: SORT_ASC\n};\n/**\n * Get the list parameters (page, sort, filters) and modifiers.\n *\n * These parameters are merged from 3 sources:\n *   - the query string from the URL\n *   - the params stored in the state (from previous navigation)\n *   - the options passed to the hook (including the filter defaultValues)\n *\n * @returns {Array} A tuple [parameters, modifiers].\n * Destructure as [\n *    { page, perPage, sort, order, filter, filterValues, displayedFilters, requestSignature },\n *    { setFilters, hideFilter, showFilter, setPage, setPerPage, setSort }\n * ]\n *\n * @example\n *\n * const [listParams, listParamsActions] = useListParams({\n *      resource: 'posts',\n *      location: location // From react-router. Injected to your component by react-admin inside a List\n *      filterDefaultValues: {\n *          published: true\n *      },\n *      sort: {\n *          field: 'published_at',\n *          order: 'DESC'\n *      },\n *      perPage: 25\n * });\n *\n * const {\n *      page,\n *      perPage,\n *      sort,\n *      order,\n *      filter,\n *      filterValues,\n *      displayedFilters,\n *      requestSignature\n * } = listParams;\n *\n * const {\n *      setFilters,\n *      hideFilter,\n *      showFilter,\n *      setPage,\n *      setPerPage,\n *      setSort,\n * } = listParamsActions;\n */\n\nvar useListParams = function (_a) {\n  var resource = _a.resource,\n      location = _a.location,\n      filterDefaultValues = _a.filterDefaultValues,\n      _b = _a.sort,\n      sort = _b === void 0 ? defaultSort : _b,\n      _c = _a.perPage,\n      perPage = _c === void 0 ? 10 : _c,\n      _d = _a.debounce,\n      debounce = _d === void 0 ? 500 : _d;\n\n  var _e = useState({}),\n      displayedFilters = _e[0],\n      setDisplayedFilters = _e[1];\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var params = useSelector(function (reduxState) {\n    return reduxState.admin.resources[resource].list;\n  }, shallowEqual).params;\n  var requestSignature = [location.search, resource, params, filterDefaultValues, JSON.stringify(sort), perPage];\n  var query = useMemo(function () {\n    return getQuery({\n      location: location,\n      params: params,\n      filterDefaultValues: filterDefaultValues,\n      sort: sort,\n      perPage: perPage\n    });\n  }, requestSignature // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var changeParams = useCallback(function (action) {\n    var newParams = queryReducer(query, action);\n    history.push({\n      search: \"?\" + stringify(__assign({}, newParams, {\n        filter: JSON.stringify(newParams.filter)\n      }))\n    });\n    dispatch(changeListParams(resource, newParams));\n  }, requestSignature); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var setSort = useCallback(function (newSort) {\n    return changeParams({\n      type: SET_SORT,\n      payload: {\n        sort: newSort\n      }\n    });\n  }, requestSignature // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var setPage = useCallback(function (newPage) {\n    return changeParams({\n      type: SET_PAGE,\n      payload: newPage\n    });\n  }, requestSignature // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var setPerPage = useCallback(function (newPerPage) {\n    return changeParams({\n      type: SET_PER_PAGE,\n      payload: newPerPage\n    });\n  }, requestSignature // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var filterValues = query.filter || emptyObject;\n  var debouncedSetFilters = lodashDebounce(function (newFilters) {\n    return changeParams({\n      type: SET_FILTER,\n      payload: removeEmpty(newFilters)\n    });\n  }, debounce);\n  var setFilters = useCallback(function (filters) {\n    return debouncedSetFilters(filters);\n  }, requestSignature // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var hideFilter = useCallback(function (filterName) {\n    setDisplayedFilters(function (previousFilters) {\n      var _a;\n\n      return __assign({}, previousFilters, (_a = {}, _a[filterName] = false, _a));\n    });\n    var newFilters = removeKey(filterValues, filterName);\n    setFilters(newFilters);\n  }, requestSignature); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var showFilter = useCallback(function (filterName, defaultValue) {\n    var _a;\n\n    setDisplayedFilters(function (previousFilters) {\n      var _a;\n\n      return __assign({}, previousFilters, (_a = {}, _a[filterName] = true, _a));\n    });\n\n    if (typeof defaultValue !== 'undefined') {\n      setFilters(__assign({}, filterValues, (_a = {}, _a[filterName] = defaultValue, _a)));\n    }\n  }, requestSignature); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return [__assign({\n    displayedFilters: displayedFilters,\n    filterValues: filterValues,\n    requestSignature: requestSignature\n  }, query), {\n    changeParams: changeParams,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    setSort: setSort,\n    setFilters: setFilters,\n    hideFilter: hideFilter,\n    showFilter: showFilter\n  }];\n};\n\nexport var validQueryParams = ['page', 'perPage', 'sort', 'order', 'filter'];\nexport var parseQueryFromLocation = function (_a) {\n  var search = _a.search;\n  var query = pickBy(parse(search), function (v, k) {\n    return validQueryParams.indexOf(k) !== -1;\n  });\n\n  if (query.filter && typeof query.filter === 'string') {\n    try {\n      query.filter = JSON.parse(query.filter);\n    } catch (err) {\n      delete query.filter;\n    }\n  }\n\n  return query;\n};\n/**\n * Check if user has already set custom sort, page, or filters for this list\n *\n * User params come from the Redux store as the params props. By default,\n * this object is:\n *\n * { filter: {}, order: null, page: 1, perPage: null, sort: null }\n *\n * To check if the user has custom params, we must compare the params\n * to these initial values.\n *\n * @param {object} params\n */\n\nexport var hasCustomParams = function (params) {\n  return params && params.filter && (Object.keys(params.filter).length > 0 || params.order != null || params.page !== 1 || params.perPage != null || params.sort != null);\n};\n/**\n * Merge list params from 3 different sources:\n *   - the query string\n *   - the params stored in the state (from previous navigation)\n *   - the props passed to the List component (including the filter defaultValues)\n */\n\nexport var getQuery = function (_a) {\n  var location = _a.location,\n      params = _a.params,\n      filterDefaultValues = _a.filterDefaultValues,\n      sort = _a.sort,\n      perPage = _a.perPage;\n  var queryFromLocation = parseQueryFromLocation(location);\n  var query = Object.keys(queryFromLocation).length > 0 ? queryFromLocation : hasCustomParams(params) ? __assign({}, params) : {\n    filter: filterDefaultValues || {}\n  };\n\n  if (!query.sort) {\n    query.sort = sort.field;\n    query.order = sort.order;\n  }\n\n  if (!query.perPage) {\n    query.perPage = perPage;\n  }\n\n  if (!query.page) {\n    query.page = 1;\n  }\n\n  return __assign({}, query, {\n    page: getNumberOrDefault(query.page, 1),\n    perPage: getNumberOrDefault(query.perPage, 10)\n  });\n};\nexport var getNumberOrDefault = function (possibleNumber, defaultValue) {\n  return (typeof possibleNumber === 'string' ? parseInt(possibleNumber, 10) : possibleNumber) || defaultValue;\n};\nexport default useListParams;","map":null,"metadata":{},"sourceType":"module"}