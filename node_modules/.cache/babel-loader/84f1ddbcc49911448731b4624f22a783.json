{"ast":null,"code":"import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_CHECK, AUTH_ERROR, AUTH_GET_PERMISSIONS } from './types';\n/**\n * Turn a function-based authProvider to an object-based one\n *\n * Allows using legacy authProviders transparently.\n *\n * @param {Function} legacyAuthProvider A legacy authProvider (type, params) => Promise<any>\n *\n * @returns {Object} An authProvider that react-admin can use\n */\n\nexport default (function (legacyAuthProvider) {\n  var authProvider = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return legacyAuthProvider.apply(null, args);\n  };\n\n  authProvider.login = function (params) {\n    return legacyAuthProvider(AUTH_LOGIN, params);\n  };\n\n  authProvider.logout = function (params) {\n    return legacyAuthProvider(AUTH_LOGOUT, params);\n  };\n\n  authProvider.checkAuth = function (params) {\n    return legacyAuthProvider(AUTH_CHECK, params);\n  };\n\n  authProvider.checkError = function (error) {\n    return legacyAuthProvider(AUTH_ERROR, error);\n  };\n\n  authProvider.getPermissions = function (params) {\n    return legacyAuthProvider(AUTH_GET_PERMISSIONS, params);\n  };\n\n  return authProvider;\n});","map":null,"metadata":{},"sourceType":"module"}