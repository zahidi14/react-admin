{"ast":null,"code":"import React, { useContext } from 'react';\nimport { Provider, ReactReduxContext } from 'react-redux';\nimport { createHashHistory } from 'history';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { AuthContext, convertLegacyAuthProvider } from '../auth';\nimport { DataProviderContext, convertLegacyDataProvider } from '../dataProvider';\nimport createAdminStore from './createAdminStore';\nimport TranslationProvider from '../i18n/TranslationProvider';\n\nvar CoreAdminContext = function (_a) {\n  var authProvider = _a.authProvider,\n      dataProvider = _a.dataProvider,\n      i18nProvider = _a.i18nProvider,\n      children = _a.children,\n      history = _a.history,\n      customReducers = _a.customReducers,\n      customSagas = _a.customSagas,\n      initialState = _a.initialState;\n  var reduxIsAlreadyInitialized = !!useContext(ReactReduxContext);\n\n  if (!dataProvider) {\n    throw new Error(\"Missing dataProvider prop.\\nReact-admin requires a valid dataProvider function to work.\");\n  }\n\n  var finalAuthProvider = authProvider instanceof Function ? convertLegacyAuthProvider(authProvider) : authProvider;\n  var finalDataProvider = dataProvider instanceof Function ? convertLegacyDataProvider(dataProvider) : dataProvider;\n  var finalHistory = history || createHashHistory();\n\n  var renderCore = function () {\n    return React.createElement(AuthContext.Provider, {\n      value: finalAuthProvider\n    }, React.createElement(DataProviderContext.Provider, {\n      value: finalDataProvider\n    }, React.createElement(TranslationProvider, {\n      i18nProvider: i18nProvider\n    }, React.createElement(ConnectedRouter, {\n      history: finalHistory\n    }, children))));\n  };\n\n  if (reduxIsAlreadyInitialized) {\n    if (!history) {\n      throw new Error(\"Missing history prop.\\nWhen integrating react-admin inside an existing redux Provider, you must provide the same 'history' prop to the <Admin> as the one used to bootstrap your routerMiddleware.\\nReact-admin uses this history for its own ConnectedRouter.\");\n    }\n\n    return renderCore();\n  } else {\n    return React.createElement(Provider, {\n      store: createAdminStore({\n        authProvider: finalAuthProvider,\n        customReducers: customReducers,\n        customSagas: customSagas,\n        dataProvider: finalDataProvider,\n        initialState: initialState,\n        history: finalHistory\n      })\n    }, renderCore());\n  }\n};\n\nexport default CoreAdminContext;","map":null,"metadata":{},"sourceType":"module"}