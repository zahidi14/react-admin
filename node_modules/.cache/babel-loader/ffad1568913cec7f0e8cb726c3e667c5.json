{"ast":null,"code":"import get from 'lodash/get';\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../sideEffect';\nvar defaultFilter = {};\n/**\n * @typedef ReferenceManyProps\n * @type {Object}\n * @property {Object} data: the referenced records dictionary by their ids.\n * @property {Object} ids: the list of referenced records ids.\n * @property {boolean} loaded: boolean indicating if the references has already be loaded loaded\n * @property {string | false} referenceBasePath base path of the related record\n */\n\n/**\n * Fetch reference records, and return them when avaliable\n *\n * The reference prop sould be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n *\n * const { loaded, referenceRecord, resourceLinkPath } = useReferenceManyFieldController({\n *     resource\n *     reference: 'users',\n *     record: {\n *         userId: 7\n *     }\n *     target: 'comments',\n *     source: 'userId',\n *     basePath: '/comments',\n *     page: 1,\n *     perPage: 25,\n * });\n *\n * @param {Object} option\n * @param {string} option.resource The current resource name\n * @param {string} option.reference The linked resource name\n * @param {Object} option.record The current resource record\n * @param {string} option.target The target resource key\n * @param {Object} option.filter The filter applied on the recorded records list\n * @param {string} option.source The key of the linked resource identifier\n * @param {string} option.basePath basepath to current resource\n * @param {number} option.page the page number\n * @param {number} option.perPage the number of item per page\n * @param {object} option.sort the sort to apply to the referenced records\n *\n * @returns {ReferenceManyProps} The reference many props\n */\n\nvar useReferenceManyFieldController = function (_a) {\n  var resource = _a.resource,\n      reference = _a.reference,\n      record = _a.record,\n      target = _a.target,\n      _b = _a.filter,\n      filter = _b === void 0 ? defaultFilter : _b,\n      source = _a.source,\n      basePath = _a.basePath,\n      page = _a.page,\n      perPage = _a.perPage,\n      _c = _a.sort,\n      sort = _c === void 0 ? {\n    field: 'id',\n    order: 'DESC'\n  } : _c;\n  var referenceId = get(record, source);\n  var notify = useNotify();\n\n  var _d = useGetManyReference(reference, target, referenceId, {\n    page: page,\n    perPage: perPage\n  }, sort, filter, resource, {\n    onFailure: function (error) {\n      return notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', 'warning');\n    }\n  }),\n      data = _d.data,\n      ids = _d.ids,\n      total = _d.total,\n      loading = _d.loading,\n      loaded = _d.loaded;\n\n  var referenceBasePath = basePath.replace(resource, reference);\n  return {\n    data: data,\n    ids: ids,\n    loaded: loaded,\n    loading: loading,\n    referenceBasePath: referenceBasePath,\n    total: total\n  };\n};\n\nexport default useReferenceManyFieldController;","map":null,"metadata":{},"sourceType":"module"}