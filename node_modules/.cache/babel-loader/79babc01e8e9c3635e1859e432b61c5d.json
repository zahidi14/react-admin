{"ast":null,"code":"import { useEffect } from 'react';\nimport { useForm } from 'react-final-form';\n/**\n * Restore the record values which should override any default values specified on the form.\n */\n\nvar useInitializeFormWithRecord = function (record) {\n  var form = useForm();\n  useEffect(function () {\n    if (!record) {\n      return;\n    }\n\n    var registeredFields = form.getRegisteredFields(); // react-final-form does not provide a way to set multiple values in one call.\n    // Using batch ensure we don't get rerenders until all our values are set\n\n    form.batch(function () {\n      Object.keys(record).forEach(function (key) {\n        // We have to check the record key is actually registered as a field\n        // as some record keys may not have a matching input\n        if (registeredFields.some(function (field) {\n          return field === key;\n        })) {\n          form.change(key, record[key]);\n          form.resetFieldState(key);\n        }\n      });\n    });\n  }, [form, record]);\n};\n\nexport default useInitializeFormWithRecord;","map":null,"metadata":{},"sourceType":"module"}