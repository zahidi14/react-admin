{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport { useCheckMinimumRequiredProps, useCreateController } from 'ra-core';\nimport TitleForRecord from '../layout/TitleForRecord';\n/**\n * Page component for the Create view\n *\n * The `<Create>` component renders the page title and actions.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes pass the `record` as prop.\n *\n * The `<Create>` component accepts the following props:\n *\n * - title\n * - actions\n *\n * Both expect an element for value.\n *\n * @example\n *     // in src/posts.js\n *     import React from 'react';\n *     import { Create, SimpleForm, TextInput } from 'react-admin';\n *\n *     export const PostCreate = (props) => (\n *         <Create {...props}>\n *             <SimpleForm>\n *                 <TextInput source=\"title\" />\n *             </SimpleForm>\n *         </Create>\n *     );\n *\n *     // in src/App.js\n *     import React from 'react';\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostCreate } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" create={PostCreate} />\n *         </Admin>\n *     );\n *     export default App;\n */\n\nvar Create = function (props) {\n  return React.createElement(CreateView, __assign({}, props, useCreateController(props)));\n};\n\nCreate.propTypes = {\n  actions: PropTypes.element,\n  aside: PropTypes.element,\n  children: PropTypes.element,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  resource: PropTypes.string.isRequired,\n  title: PropTypes.node,\n  record: PropTypes.object,\n  hasList: PropTypes.bool,\n  successMessage: PropTypes.string\n};\nvar useStyles = makeStyles(function (theme) {\n  var _a;\n\n  return {\n    root: {},\n    main: {\n      display: 'flex'\n    },\n    noActions: (_a = {}, _a[theme.breakpoints.up('sm')] = {\n      marginTop: '1em'\n    }, _a),\n    card: {\n      flex: '1 1 auto'\n    }\n  };\n});\n\nvar sanitizeRestProps = function (_a) {\n  var actions = _a.actions,\n      children = _a.children,\n      className = _a.className,\n      crudCreate = _a.crudCreate,\n      loading = _a.loading,\n      loaded = _a.loaded,\n      saving = _a.saving,\n      resource = _a.resource,\n      title = _a.title,\n      hasCreate = _a.hasCreate,\n      hasEdit = _a.hasEdit,\n      hasList = _a.hasList,\n      hasShow = _a.hasShow,\n      match = _a.match,\n      location = _a.location,\n      history = _a.history,\n      options = _a.options,\n      locale = _a.locale,\n      permissions = _a.permissions,\n      successMessage = _a.successMessage,\n      rest = __rest(_a, [\"actions\", \"children\", \"className\", \"crudCreate\", \"loading\", \"loaded\", \"saving\", \"resource\", \"title\", \"hasCreate\", \"hasEdit\", \"hasList\", \"hasShow\", \"match\", \"location\", \"history\", \"options\", \"locale\", \"permissions\", \"successMessage\"]);\n\n  return rest;\n};\n\nexport var CreateView = function (props) {\n  var _a;\n\n  var actions = props.actions,\n      aside = props.aside,\n      basePath = props.basePath,\n      children = props.children,\n      classesOverride = props.classes,\n      className = props.className,\n      defaultTitle = props.defaultTitle,\n      hasList = props.hasList,\n      hasShow = props.hasShow,\n      _b = props.record,\n      record = _b === void 0 ? {} : _b,\n      redirect = props.redirect,\n      resource = props.resource,\n      save = props.save,\n      saving = props.saving,\n      title = props.title,\n      version = props.version,\n      rest = __rest(props, [\"actions\", \"aside\", \"basePath\", \"children\", \"classes\", \"className\", \"defaultTitle\", \"hasList\", \"hasShow\", \"record\", \"redirect\", \"resource\", \"save\", \"saving\", \"title\", \"version\"]);\n\n  useCheckMinimumRequiredProps('Create', ['children'], props);\n  var classes = useStyles({\n    classes: classesOverride\n  });\n  return React.createElement(\"div\", __assign({\n    className: classnames('create-page', classes.root, className)\n  }, sanitizeRestProps(rest)), React.createElement(TitleForRecord, {\n    title: title,\n    record: record,\n    defaultTitle: defaultTitle\n  }), actions && cloneElement(actions, __assign({\n    basePath: basePath,\n    resource: resource,\n    hasList: hasList\n  }, actions.props)), React.createElement(\"div\", {\n    className: classnames(classes.main, (_a = {}, _a[classes.noActions] = !actions, _a))\n  }, React.createElement(Card, {\n    className: classes.card\n  }, cloneElement(Children.only(children), {\n    basePath: basePath,\n    record: record,\n    redirect: typeof children.props.redirect === 'undefined' ? redirect : children.props.redirect,\n    resource: resource,\n    save: save,\n    saving: saving,\n    version: version\n  })), aside && cloneElement(aside, {\n    basePath: basePath,\n    record: record,\n    resource: resource,\n    save: save,\n    saving: saving,\n    version: version\n  })));\n};\nCreateView.propTypes = {\n  actions: PropTypes.element,\n  aside: PropTypes.element,\n  basePath: PropTypes.string,\n  children: PropTypes.element,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  defaultTitle: PropTypes.any,\n  hasList: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  record: PropTypes.object,\n  redirect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  resource: PropTypes.string,\n  save: PropTypes.func,\n  title: PropTypes.node\n};\nCreateView.defaultProps = {\n  classes: {}\n};\nexport default Create;","map":null,"metadata":{},"sourceType":"module"}