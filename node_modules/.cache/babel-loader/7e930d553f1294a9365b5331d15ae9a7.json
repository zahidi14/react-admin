{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { sanitizeListRestProps } from 'ra-core';\nimport FilterForm from './FilterForm';\nimport FilterButton from './FilterButton';\nvar useStyles = makeStyles({\n  button: {},\n  form: {}\n});\n\nvar Filter = function (props) {\n  var classes = useStyles({\n    classes: props.classes\n  });\n\n  var renderButton = function () {\n    var classesOverride = props.classes,\n        context = props.context,\n        resource = props.resource,\n        children = props.children,\n        showFilter = props.showFilter,\n        hideFilter = props.hideFilter,\n        displayedFilters = props.displayedFilters,\n        filterValues = props.filterValues,\n        variant = props.variant,\n        rest = __rest(props, [\"classes\", \"context\", \"resource\", \"children\", \"showFilter\", \"hideFilter\", \"displayedFilters\", \"filterValues\", \"variant\"]);\n\n    return React.createElement(FilterButton, __assign({\n      className: classes.button,\n      resource: resource,\n      filters: React.Children.toArray(children),\n      showFilter: showFilter,\n      displayedFilters: displayedFilters,\n      filterValues: filterValues\n    }, sanitizeListRestProps(rest)));\n  };\n\n  var renderForm = function () {\n    var classesOverride = props.classes,\n        context = props.context,\n        resource = props.resource,\n        children = props.children,\n        hideFilter = props.hideFilter,\n        displayedFilters = props.displayedFilters,\n        showFilter = props.showFilter,\n        filterValues = props.filterValues,\n        setFilters = props.setFilters,\n        rest = __rest(props, [\"classes\", \"context\", \"resource\", \"children\", \"hideFilter\", \"displayedFilters\", \"showFilter\", \"filterValues\", \"setFilters\"]);\n\n    return React.createElement(FilterForm, __assign({\n      className: classes.form,\n      resource: resource,\n      filters: React.Children.toArray(children),\n      hideFilter: hideFilter,\n      displayedFilters: displayedFilters,\n      initialValues: filterValues,\n      setFilters: setFilters\n    }, sanitizeListRestProps(rest)));\n  };\n\n  return props.context === 'button' ? renderButton() : renderForm();\n};\n\nFilter.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  context: PropTypes.oneOf(['form', 'button']),\n  displayedFilters: PropTypes.object,\n  filterValues: PropTypes.object,\n  hideFilter: PropTypes.func,\n  setFilters: PropTypes.func,\n  showFilter: PropTypes.func,\n  resource: PropTypes.string.isRequired\n};\nexport default Filter;","map":null,"metadata":{},"sourceType":"module"}