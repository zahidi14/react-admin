{"ast":null,"code":"import useQueryWithStore from './useQueryWithStore';\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true }\n * - error: { error: [error from response], loading: false, loaded: true }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success of failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded }.\n *\n * @example\n *\n * import { useGetList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, ids, loading, error } = useGetList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].title}</li>\n *     )}</ul>;\n * };\n */\n\nvar useGetList = function (resource, pagination, sort, filter, options) {\n  if (options && options.action) {\n    throw new Error('useGetList() does not support custom action names. Use useQueryWithStore() and your own Redux selectors if you need a custom action name for a getList query');\n  }\n\n  var key = JSON.stringify({\n    type: 'GET_LIST',\n    resource: resource,\n    payload: {\n      pagination: pagination,\n      sort: sort,\n      filter: filter\n    }\n  });\n\n  var _a = useQueryWithStore({\n    type: 'getList',\n    resource: resource,\n    payload: {\n      pagination: pagination,\n      sort: sort,\n      filter: filter\n    }\n  }, options, function (state) {\n    return state.admin.customQueries[key] ? state.admin.customQueries[key].data : null;\n  }, function (state) {\n    return state.admin.customQueries[key] ? state.admin.customQueries[key].total : null;\n  }),\n      data = _a.data,\n      total = _a.total,\n      error = _a.error,\n      loading = _a.loading,\n      loaded = _a.loaded;\n\n  var ids = data ? data.map(function (record) {\n    return record.id;\n  }) : [];\n  var dataObject = data ? data.reduce(function (acc, next) {\n    acc[next.id] = next;\n    return acc;\n  }, {}) : {};\n  return {\n    data: dataObject,\n    ids: ids,\n    total: total,\n    error: error,\n    loading: loading,\n    loaded: loaded\n  };\n};\n\nexport default useGetList;","map":null,"metadata":{},"sourceType":"module"}