{"ast":null,"code":"import { CREATE, DELETE, DELETE_MANY, GET_LIST, GET_MANY, GET_MANY_REFERENCE, GET_ONE, UPDATE, UPDATE_MANY } from '../core';\n\nvar defaultDataProvider = function () {\n  return Promise.resolve();\n};\n\ndefaultDataProvider.create = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.delete = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.deleteMany = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.getList = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.getMany = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.getManyReference = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.getOne = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.update = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.updateMany = function () {\n  return Promise.resolve(null);\n};\n\nvar fetchMap = {\n  create: CREATE,\n  delete: DELETE,\n  deleteMany: DELETE_MANY,\n  getList: GET_LIST,\n  getMany: GET_MANY,\n  getManyReference: GET_MANY_REFERENCE,\n  getOne: GET_ONE,\n  update: UPDATE,\n  updateMany: UPDATE_MANY\n};\n/**\n * Turn a function-based dataProvider to an object-based one\n *\n * Allows using legacy dataProviders transparently.\n *\n * @param {Function} legacyDataProvider A legacy dataProvider (type, resource, params) => Promise<any>\n *\n * @returns {Object} A dataProvider that react-admin can use\n */\n\nvar convertLegacyDataProvider = function (legacyDataProvider) {\n  var proxy = new Proxy(defaultDataProvider, {\n    get: function (_, name) {\n      return function (resource, params) {\n        if (Object.keys(fetchMap).includes(name.toString())) {\n          var fetchType = fetchMap[name.toString()];\n          return legacyDataProvider(fetchType, resource, params);\n        }\n\n        return legacyDataProvider(name.toString(), resource, params);\n      };\n    },\n    apply: function (_, __, args) {\n      return legacyDataProvider.apply(legacyDataProvider, args);\n    }\n  });\n  return proxy;\n};\n\nexport default convertLegacyDataProvider;","map":null,"metadata":{},"sourceType":"module"}