{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport { hideNotification, getNotification, undo, complete, undoableEventEmitter, useTranslate } from 'ra-core';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    error: {\n      backgroundColor: theme.palette.error.dark,\n      color: theme.palette.error.contrastText\n    },\n    warning: {\n      backgroundColor: theme.palette.error.light,\n      color: theme.palette.error.contrastText\n    },\n    undo: {\n      color: theme.palette.primary.light\n    }\n  };\n});\n\nvar Notification = function (_a) {\n  var type = _a.type,\n      className = _a.className,\n      autoHideDuration = _a.autoHideDuration,\n      rest = __rest(_a, [\"type\", \"className\", \"autoHideDuration\"]);\n\n  var _b = useState(false),\n      open = _b[0],\n      setOpen = _b[1];\n\n  var notification = useSelector(getNotification);\n  var dispatch = useDispatch();\n  var translate = useTranslate();\n  var styles = useStyles({});\n  useEffect(function () {\n    setOpen(!!notification);\n  }, [notification]);\n  var handleRequestClose = useCallback(function () {\n    setOpen(false);\n  }, [setOpen]);\n  var handleExited = useCallback(function () {\n    if (notification && notification.undoable) {\n      dispatch(complete());\n      undoableEventEmitter.emit('end', {\n        isUndo: false\n      });\n    }\n\n    dispatch(hideNotification());\n  }, [dispatch, notification]);\n  var handleUndo = useCallback(function () {\n    dispatch(undo());\n    undoableEventEmitter.emit('end', {\n      isUndo: true\n    });\n  }, [dispatch]);\n  return React.createElement(Snackbar, __assign({\n    open: open,\n    message: notification && notification.message && translate(notification.message, notification.messageArgs),\n    autoHideDuration: notification && notification.autoHideDuration || autoHideDuration,\n    disableWindowBlurListener: notification && notification.undoable,\n    onExited: handleExited,\n    onClose: handleRequestClose,\n    ContentProps: {\n      className: classnames(styles[notification && notification.type || type], className)\n    },\n    action: notification && notification.undoable ? React.createElement(Button, {\n      color: \"primary\",\n      className: styles.undo,\n      size: \"small\",\n      onClick: handleUndo\n    }, translate('ra.action.undo')) : null\n  }, rest));\n};\n\nNotification.propTypes = {\n  type: PropTypes.string\n};\nNotification.defaultProps = {\n  type: 'info',\n  autoHideDuration: 4000\n};\nexport default Notification;","map":null,"metadata":{},"sourceType":"module"}