{"ast":null,"code":"import { useCallback } from 'react'; // @ts-ignore\n\nimport inflection from 'inflection';\nimport { parse } from 'query-string';\nimport { useCheckMinimumRequiredProps } from './checkMinimumRequiredProps';\nimport { useCreate } from '../dataProvider';\nimport { useNotify, useRedirect } from '../sideEffect';\nimport { useTranslate } from '../i18n';\nimport { useVersion } from '.';\nimport { CRUD_CREATE } from '../actions';\n/**\n * Prepare data for the Create view\n *\n * @param {Object} props The props passed to the Create component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Create view\n *\n * @example\n *\n * import { useCreateController } from 'react-admin';\n * import CreateView from './CreateView';\n *\n * const MyCreate = props => {\n *     const controllerProps = useCreateController(props);\n *     return <CreateView {...controllerProps} {...props} />;\n * }\n */\n\nvar useCreateController = function (props) {\n  useCheckMinimumRequiredProps('Create', ['basePath', 'location', 'resource'], props);\n  var basePath = props.basePath,\n      resource = props.resource,\n      location = props.location,\n      _a = props.record,\n      record = _a === void 0 ? {} : _a,\n      hasShow = props.hasShow,\n      hasEdit = props.hasEdit,\n      successMessage = props.successMessage;\n  var translate = useTranslate();\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var recordToUse = getRecord(location, record);\n  var version = useVersion();\n\n  var _b = useCreate(resource),\n      create = _b[0],\n      saving = _b[1].loading;\n\n  var save = useCallback(function (data, redirectTo, _a) {\n    if (redirectTo === void 0) {\n      redirectTo = 'list';\n    }\n\n    var _b = _a === void 0 ? {} : _a,\n        onSuccess = _b.onSuccess,\n        onFailure = _b.onFailure;\n\n    return create({\n      payload: {\n        data: data\n      }\n    }, {\n      action: CRUD_CREATE,\n      onSuccess: onSuccess ? onSuccess : function (_a) {\n        var newRecord = _a.data;\n        notify(successMessage || 'ra.notification.created', 'info', {\n          smart_count: 1\n        });\n        redirect(redirectTo, basePath, newRecord.id, newRecord);\n      },\n      onFailure: onFailure ? onFailure : function (error) {\n        notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', 'warning');\n      }\n    });\n  }, [create, notify, successMessage, redirect, basePath]);\n  var resourceName = translate(\"resources.\" + resource + \".name\", {\n    smart_count: 1,\n    _: inflection.humanize(inflection.singularize(resource))\n  });\n  var defaultTitle = translate('ra.page.create', {\n    name: \"\" + resourceName\n  });\n  return {\n    loading: false,\n    loaded: true,\n    saving: saving,\n    defaultTitle: defaultTitle,\n    save: save,\n    resource: resource,\n    basePath: basePath,\n    record: recordToUse,\n    redirect: getDefaultRedirectRoute(hasShow, hasEdit),\n    version: version\n  };\n};\n\nexport default useCreateController;\nexport var getRecord = function (_a, record) {\n  var state = _a.state,\n      search = _a.search;\n\n  if (record === void 0) {\n    record = {};\n  }\n\n  return state && state.record ? state.record : search ? JSON.parse(parse(search).source) : record;\n};\n\nvar getDefaultRedirectRoute = function (hasShow, hasEdit) {\n  if (hasEdit) {\n    return 'edit';\n  }\n\n  if (hasShow) {\n    return 'show';\n  }\n\n  return 'list';\n};","map":null,"metadata":{},"sourceType":"module"}