{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider from './useAuthProvider';\n/**\n * Get a callback for calling the authProvider.getPermissions() method.\n *\n * @see useAuthProvider\n *\n * @returns {Function} getPermissions callback\n *\n * This is a low level hook. See those more specialized hooks\n * offering state handling.\n *\n * @see usePermissions\n *\n * @example\n *\n * import { useGetPermissions } from 'react-admin';\n *\n * const Roles = () => {\n *     const [permissions, setPermissions] = useState([]);\n *     const getPermissions = useGetPermissions();\n *     useEffect(() => {\n *         getPermissions().then(permissions => setPermissions(permissions))\n *     }, [])\n *     return (\n *         <ul>\n *             {permissions.map((permission, key) => (\n *                 <li key={key}>{permission}</li>\n *             ))}\n *         </ul>\n *     );\n * }\n */\n\nvar useGetPermissions = function () {\n  var authProvider = useAuthProvider();\n  var getPermissions = useCallback(function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return authProvider.getPermissions(params);\n  }, [authProvider]);\n  return authProvider ? getPermissions : getPermissionsWithoutProvider;\n};\n\nvar getPermissionsWithoutProvider = function () {\n  return Promise.resolve([]);\n};\n\nexport default useGetPermissions;","map":null,"metadata":{},"sourceType":"module"}