{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Children, cloneElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport get from 'lodash/get';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Error as ErrorIcon } from '@material-ui/icons';\nimport { useReference, getResourceLinkPath } from 'ra-core';\nimport LinearProgress from '../layout/LinearProgress';\nimport Link from '../Link';\nimport sanitizeRestProps from './sanitizeRestProps';\n/**\n * Fetch reference record, and delegate rendering to child component.\n *\n * The reference prop sould be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @default\n * By default, includes a link to the <Edit> page of the related record\n * (`/users/:userId` in the previous example).\n *\n * Set the `link` prop to \"show\" to link to the <Show> page instead.\n *\n * @example\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link=\"show\">\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @default\n * You can also prevent `<ReferenceField>` from adding link to children by setting\n * `link` to false.\n *\n * @example\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={false}>\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @default\n * Alternatively, you can also pass a custom function to `link`. It must take reference and record\n * as arguments and return a string\n *\n * @example\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={(reference, record) => \"/path/to/${reference}/${record}\"}>\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @default\n * In previous versions of React-Admin, the prop `linkType` was used. It is now deprecated and replaced with `link`. However\n * backward-compatibility is still kept\n */\n\nvar ReferenceField = function (_a) {\n  var children = _a.children,\n      record = _a.record,\n      source = _a.source,\n      props = __rest(_a, [\"children\", \"record\", \"source\"]);\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceField> only accepts a single child');\n  }\n\n  var id = get(record, source);\n\n  var _b = useReference(__assign({}, props, {\n    id: id\n  })),\n      loaded = _b.loaded,\n      error = _b.error,\n      referenceRecord = _b.referenceRecord;\n\n  var resourceLinkPath = getResourceLinkPath(__assign({\n    record: record,\n    source: source\n  }, props));\n  return React.createElement(PureReferenceFieldView, __assign({}, props, {\n    loaded: loaded,\n    error: error,\n    referenceRecord: referenceRecord,\n    resourceLinkPath: resourceLinkPath\n  }), children);\n};\n\nReferenceField.propTypes = {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  cellClassName: PropTypes.string,\n  headerClassName: PropTypes.string,\n  label: PropTypes.string,\n  record: PropTypes.object,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  source: PropTypes.string.isRequired,\n  translateChoice: PropTypes.func,\n  linkType: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  link: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]).isRequired\n};\nReferenceField.defaultProps = {\n  addLabel: true,\n  classes: {},\n  link: 'edit',\n  record: {}\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    link: {\n      color: theme.palette.primary.main\n    }\n  };\n}); // useful to prevent click bubbling in a datagrid with rowClick\n\nvar stopPropagation = function (e) {\n  return e.stopPropagation();\n};\n\nexport var ReferenceFieldView = function (_a) {\n  var basePath = _a.basePath,\n      children = _a.children,\n      className = _a.className,\n      classesOverride = _a.classes,\n      error = _a.error,\n      loaded = _a.loaded,\n      record = _a.record,\n      reference = _a.reference,\n      referenceRecord = _a.referenceRecord,\n      resource = _a.resource,\n      resourceLinkPath = _a.resourceLinkPath,\n      source = _a.source,\n      _b = _a.translateChoice,\n      translateChoice = _b === void 0 ? false : _b,\n      rest = __rest(_a, [\"basePath\", \"children\", \"className\", \"classes\", \"error\", \"loaded\", \"record\", \"reference\", \"referenceRecord\", \"resource\", \"resourceLinkPath\", \"source\", \"translateChoice\"]);\n\n  var classes = useStyles({\n    classes: classesOverride\n  });\n\n  if (!loaded) {\n    return React.createElement(LinearProgress, null);\n  }\n\n  if (error) {\n    return React.createElement(ErrorIcon, {\n      \"aria-errormessage\": error.message ? error.message : error,\n      color: \"error\",\n      fontSize: \"small\"\n    });\n  }\n\n  if (!referenceRecord) {\n    return null;\n  }\n\n  if (resourceLinkPath) {\n    return React.createElement(Link, {\n      to: resourceLinkPath,\n      className: className,\n      onClick: stopPropagation\n    }, cloneElement(Children.only(children), __assign({\n      className: classnames(children.props.className, classes.link // force color override for Typography components\n      ),\n      record: referenceRecord,\n      resource: reference,\n      basePath: basePath,\n      translateChoice: translateChoice\n    }, sanitizeRestProps(rest))));\n  }\n\n  return cloneElement(Children.only(children), __assign({\n    record: referenceRecord,\n    resource: reference,\n    basePath: basePath,\n    translateChoice: translateChoice\n  }, sanitizeRestProps(rest)));\n};\nReferenceFieldView.propTypes = {\n  basePath: PropTypes.string,\n  children: PropTypes.element,\n  className: PropTypes.string,\n  classes: PropTypes.object,\n  loading: PropTypes.bool,\n  record: PropTypes.object,\n  reference: PropTypes.string,\n  referenceRecord: PropTypes.object,\n  resource: PropTypes.string,\n  resourceLinkPath: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  source: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nvar PureReferenceFieldView = memo(ReferenceFieldView);\nexport default ReferenceField;","map":null,"metadata":{},"sourceType":"module"}