{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useEffect, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Drawer, makeStyles, useMediaQuery } from '@material-ui/core';\nimport lodashGet from 'lodash/get';\nimport { setSidebarVisibility } from 'ra-core';\nexport var DRAWER_WIDTH = 240;\nexport var CLOSED_DRAWER_WIDTH = 55;\nvar useStyles = makeStyles(function (theme) {\n  var _a;\n\n  return {\n    drawerPaper: (_a = {\n      position: 'relative',\n      height: 'auto',\n      overflowX: 'hidden',\n      width: function (props) {\n        return props.open ? lodashGet(theme, 'sidebar.width', DRAWER_WIDTH) : lodashGet(theme, 'sidebar.closedWidth', CLOSED_DRAWER_WIDTH);\n      },\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      backgroundColor: 'transparent',\n      marginTop: '0.5em',\n      borderRight: 'none'\n    }, _a[theme.breakpoints.only('xs')] = {\n      marginTop: 0,\n      height: '100vh',\n      position: 'inherit',\n      backgroundColor: theme.palette.background.default\n    }, _a[theme.breakpoints.up('md')] = {\n      border: 'none',\n      marginTop: '1.5em'\n    }, _a)\n  };\n});\n\nvar Sidebar = function (_a) {\n  var children = _a.children,\n      closedSize = _a.closedSize,\n      size = _a.size,\n      rest = __rest(_a, [\"children\", \"closedSize\", \"size\"]);\n\n  var dispatch = useDispatch();\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('xs');\n  });\n  var isSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('sm');\n  }); // FIXME negating isXSmall and isSmall should be enough, but unfortunately\n  // mui media queries use a two pass system and are always false at first\n  // see https://github.com/mui-org/material-ui/issues/14336\n\n  var isDesktop = useMediaQuery(function (theme) {\n    return theme.breakpoints.up('md');\n  });\n  useEffect(function () {\n    if (isDesktop) {\n      dispatch(setSidebarVisibility(true)); // FIXME renders with a closed sidebar at first\n    }\n  }, [isDesktop, dispatch]);\n  var open = useSelector(function (state) {\n    return state.admin.ui.sidebarOpen;\n  });\n  useSelector(function (state) {\n    return state.locale;\n  }); // force redraw on locale change\n\n  var handleClose = function () {\n    return dispatch(setSidebarVisibility(false));\n  };\n\n  var toggleSidebar = function () {\n    return dispatch(setSidebarVisibility(!open));\n  };\n\n  var classes = useStyles({\n    open: open\n  });\n  return isXSmall ? React.createElement(Drawer, __assign({\n    variant: \"temporary\",\n    open: open,\n    PaperProps: {\n      className: classes.drawerPaper\n    },\n    onClose: toggleSidebar\n  }, rest), cloneElement(Children.only(children), {\n    onMenuClick: handleClose\n  })) : isSmall ? React.createElement(Drawer, __assign({\n    variant: \"permanent\",\n    open: open,\n    PaperProps: {\n      className: classes.drawerPaper\n    },\n    onClose: toggleSidebar\n  }, rest), cloneElement(Children.only(children), {\n    dense: true,\n    onMenuClick: handleClose\n  })) : React.createElement(Drawer, __assign({\n    variant: \"permanent\",\n    open: open,\n    PaperProps: {\n      className: classes.drawerPaper\n    },\n    onClose: toggleSidebar\n  }, rest), cloneElement(Children.only(children), {\n    dense: true\n  }));\n};\n\nSidebar.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default Sidebar;","map":null,"metadata":{},"sourceType":"module"}