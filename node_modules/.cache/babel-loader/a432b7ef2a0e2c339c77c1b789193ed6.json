{"ast":null,"code":"import { useEffect } from 'react';\nimport useCheckAuth from './useCheckAuth';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n/**\n * Hook for getting the authentication status and restricting access to authenticated users\n *\n * Calls the authProvider.checkAuth() method asynchronously.\n * If the authProvider returns a rejected promise, logs the user out.\n *\n * The return value updates according to the authProvider request state:\n *\n * - start:   { authenticated: false, loading: true, loaded: false }\n * - success: { authenticated: true,  loading: false, loaded: true }\n * - error:   { authenticated: false, loading: false, loaded: true }\n *\n * Useful in custom page components that can work both for connected and\n * anonymous users. For pages that can only work for connected users,\n * prefer the useAuthenticated() hook.\n *\n * @see useAuthenticated()\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @returns The current auth check state. Destructure as { authenticated, error, loading, loaded }.\n *\n * @example\n *     import { useAuthState } from 'react-admin';\n *\n *     const CustomRoutes = [\n *         <Route path=\"/bar\" render={() => {\n *              const { authenticated } = useAuthState({ myContext: 'foobar' });\n *              return authenticated ? <Bar /> : <BarNotAuthenticated />;\n *          }} />,\n *     ];\n *     const App = () => (\n *         <Admin customRoutes={customRoutes}>\n *             ...\n *         </Admin>\n *     );\n */\n\nvar useAuthState = function (params) {\n  if (params === void 0) {\n    params = emptyParams;\n  }\n\n  var _a = useSafeSetState({\n    loading: true,\n    loaded: false,\n    authenticated: true\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var checkAuth = useCheckAuth();\n  useEffect(function () {\n    checkAuth(params, false).then(function () {\n      return setState({\n        loading: false,\n        loaded: true,\n        authenticated: true\n      });\n    }).catch(function () {\n      return setState({\n        loading: false,\n        loaded: true,\n        authenticated: false\n      });\n    });\n  }, [checkAuth, params, setState]);\n  return state;\n};\n\nexport default useAuthState;","map":null,"metadata":{},"sourceType":"module"}