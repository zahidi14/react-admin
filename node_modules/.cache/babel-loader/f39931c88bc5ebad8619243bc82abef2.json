{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React from 'react';\nimport { default as warning } from '../util/warning';\nimport useTranslate from './useTranslate';\nimport useLocale from './useLocale';\n/**\n * Higher-Order Component for getting access to the `locale` and the `translate` function in props.\n *\n * Requires that the app is decorated by the <TranslationProvider> to inject\n * the translation dictionaries and function in the context.\n *\n * @example\n *     import React from 'react';\n *     import { translate } from 'react-admin';\n *\n *     const MyHelloButton = ({ translate }) => (\n *         <button>{translate('myroot.hello.world')}</button>\n *     );\n *\n *     export default translate(MyHelloButton);\n *\n * @param {*} BaseComponent The component to decorate\n */\n\nvar withTranslate = function (BaseComponent) {\n  warning(typeof BaseComponent === 'string', \"The translate function is a Higher Order Component, and should not be called directly with a translation key. Use the translate function passed as prop to your component props instead:\\n\\nconst MyHelloButton = ({ translate }) => (\\n    <button>{translate('myroot.hello.world')}</button>\\n);\");\n\n  var TranslatedComponent = function (props) {\n    var translate = useTranslate();\n    var locale = useLocale();\n    return React.createElement(BaseComponent, __assign({\n      translate: translate,\n      locale: locale\n    }, props));\n  };\n\n  TranslatedComponent.defaultProps = BaseComponent.defaultProps;\n  return TranslatedComponent;\n};\n\nexport default withTranslate;","map":null,"metadata":{},"sourceType":"module"}