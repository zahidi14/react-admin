{"ast":null,"code":"import { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { crudGetMatchingAccumulate } from '../../actions/accumulateActions';\nimport { getPossibleReferences, getPossibleReferenceValues, getReferenceResource } from '../../reducer';\nimport { useDeepCompareEffect } from '../../util/hooks';\n\nvar defaultReferenceSource = function (resource, source) {\n  return resource + \"@\" + source;\n};\n\nexport default (function (_a) {\n  var reference = _a.reference,\n      _b = _a.referenceSource,\n      referenceSource = _b === void 0 ? defaultReferenceSource : _b,\n      resource = _a.resource,\n      source = _a.source,\n      filter = _a.filter,\n      pagination = _a.pagination,\n      sort = _a.sort,\n      id = _a.id;\n  var dispatch = useDispatch();\n  useDeepCompareEffect(function () {\n    dispatch(crudGetMatchingAccumulate(reference, referenceSource(resource, source), pagination, sort, filter));\n  }, [dispatch, filter, reference, referenceSource, resource, source, pagination, sort]);\n  var matchingReferences = useGetMatchingReferenceSelector({\n    referenceSource: referenceSource,\n    filter: filter,\n    reference: reference,\n    resource: resource,\n    source: source,\n    id: id\n  });\n\n  if (!matchingReferences) {\n    return {\n      loading: true,\n      error: null,\n      matchingReferences: null\n    };\n  }\n\n  if (matchingReferences.error) {\n    return {\n      loading: false,\n      matchingReferences: null,\n      error: matchingReferences.error\n    };\n  }\n\n  return {\n    loading: false,\n    error: null,\n    matchingReferences: matchingReferences\n  };\n});\n\nvar useGetMatchingReferenceSelector = function (_a) {\n  var referenceSource = _a.referenceSource,\n      filter = _a.filter,\n      reference = _a.reference,\n      resource = _a.resource,\n      source = _a.source,\n      id = _a.id;\n  var getMatchingReferences = useCallback(function (state) {\n    var referenceResource = getReferenceResource(state, {\n      reference: reference\n    });\n    var possibleValues = getPossibleReferenceValues(state, {\n      referenceSource: referenceSource,\n      resource: resource,\n      source: source\n    });\n    return getPossibleReferences(referenceResource, possibleValues, [id]);\n  }, [referenceSource, reference, resource, source, id]);\n  return useSelector(getMatchingReferences);\n};","map":null,"metadata":{},"sourceType":"module"}