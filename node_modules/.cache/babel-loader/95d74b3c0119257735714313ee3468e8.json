{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport useListController from './useListController';\nimport { useTranslate } from '../i18n';\n/**\n * Render prop version of the useListController hook.\n *\n * @see useListController\n * @example\n *\n * const ListView = () => <div>...</div>;\n * const List = props => (\n *     <ListController {...props}>\n *        {controllerProps => <ListView {...controllerProps} {...props} />}\n *     </ListController>\n * )\n */\n\nvar ListController = function (_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  var controllerProps = useListController(props);\n  var translate = useTranslate(); // injected for backwards compatibility\n\n  return children(__assign({\n    translate: translate\n  }, controllerProps));\n};\n\nexport default ListController;","map":null,"metadata":{},"sourceType":"module"}