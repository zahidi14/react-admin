{"ast":null,"code":"import inflection from 'inflection';\nimport useVersion from './useVersion';\nimport { useCheckMinimumRequiredProps } from './checkMinimumRequiredProps';\nimport { useGetOne } from '../dataProvider';\nimport { useTranslate } from '../i18n';\nimport { useNotify, useRedirect, useRefresh } from '../sideEffect';\nimport { CRUD_GET_ONE } from '../actions';\n/**\n * Prepare data for the Show view\n *\n * @param {Object} props The props passed to the Show component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Show view\n *\n * @example\n *\n * import { useShowController } from 'react-admin';\n * import ShowView from './ShowView';\n *\n * const MyShow = props => {\n *     const controllerProps = useShowController(props);\n *     return <ShowView {...controllerProps} {...props} />;\n * }\n */\n\nvar useShowController = function (props) {\n  useCheckMinimumRequiredProps('Show', ['basePath', 'resource'], props);\n  var basePath = props.basePath,\n      id = props.id,\n      resource = props.resource;\n  var translate = useTranslate();\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var refresh = useRefresh();\n  var version = useVersion();\n\n  var _a = useGetOne(resource, id, {\n    version: version,\n    action: CRUD_GET_ONE,\n    onFailure: function () {\n      notify('ra.notification.item_doesnt_exist', 'warning');\n      redirect('list', basePath);\n      refresh();\n    }\n  }),\n      record = _a.data,\n      loading = _a.loading,\n      loaded = _a.loaded;\n\n  var resourceName = translate(\"resources.\" + resource + \".name\", {\n    smart_count: 1,\n    _: inflection.humanize(inflection.singularize(resource))\n  });\n  var defaultTitle = translate('ra.page.show', {\n    name: \"\" + resourceName,\n    id: id,\n    record: record\n  });\n  return {\n    loading: loading,\n    loaded: loaded,\n    defaultTitle: defaultTitle,\n    resource: resource,\n    basePath: basePath,\n    record: record,\n    version: version\n  };\n};\n\nexport default useShowController;","map":null,"metadata":{},"sourceType":"module"}