{"ast":null,"code":"import get from 'lodash/get';\nimport { linkToRecord } from '../../util';\n/**\n * @typedef ReferenceProps\n * @type {Object}\n * @property {boolean} loading: boolean indicating if the reference is loading\n * @property {boolean} loaded: boolean indicating if the reference has loaded\n * @property {Object} referenceRecord: the referenced record.\n * @property {string | false} resourceLinkPath link to the page of the related record (depends on link) (false is no link)\n */\n\n/**\n * Get the link toward the referenced resource\n *\n * @example\n *\n * const linkPath = getResourceLinkPath({\n *      basePath: '/comments',\n *      link: 'edit',\n *      reference: 'users',\n *      record: {\n *          userId: 7\n *      },\n *      resource: 'comments',\n *      source: 'userId',\n * });\n *\n * @param {Object} option\n * @param {string} option.basePath basepath to current resource\n * @param {string | false | LinkToFunctionType} option.link=\"edit\" The link toward the referenced record. 'edit', 'show' or false for no link (default to edit). Alternatively a function that returns a string\n * @param {string | false | LinkToFunctionType} [option.linkType] DEPRECATED : old name for link\n * @param {string} option.reference The linked resource name\n * @param {Object} option.record The The current resource record\n * @param {string} option.resource The current resource name\n * @param {string} option.source The key of the linked resource identifier\n *\n * @returns {ReferenceProps} The reference props\n */\n\nvar getResourceLinkPath = function (_a) {\n  var basePath = _a.basePath,\n      _b = _a.link,\n      link = _b === void 0 ? 'edit' : _b,\n      linkType = _a.linkType,\n      reference = _a.reference,\n      _c = _a.record,\n      record = _c === void 0 ? {\n    id: ''\n  } : _c,\n      resource = _a.resource,\n      source = _a.source;\n  var sourceId = get(record, source);\n  var rootPath = basePath.replace(resource, reference); // Backward compatibility: keep linkType but with warning\n\n  var getResourceLinkPath = function (linkTo) {\n    return !linkTo ? false : typeof linkTo === 'function' ? linkTo(record, reference) : linkToRecord(rootPath, sourceId, linkTo);\n  };\n\n  if (linkType !== undefined) {\n    console.warn(\"The 'linkType' prop is deprecated and should be named to 'link' in <ReferenceField />\");\n  }\n\n  var resourceLinkPath = getResourceLinkPath(linkType !== undefined ? linkType : link);\n  return resourceLinkPath;\n};\n\nexport default getResourceLinkPath;","map":null,"metadata":{},"sourceType":"module"}