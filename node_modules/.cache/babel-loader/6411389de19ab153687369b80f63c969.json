{"ast":null,"code":"import { useCallback } from 'react';\nimport debounce from 'lodash/debounce';\nimport useReferenceArrayInputController from './useReferenceArrayInputController';\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using\n * `dataProvider.getMany()`) as well as possible resources (using\n * `dataProvider.getMatching()` REST method) in the reference endpoint. It then\n * delegates rendering to a subcomponent, to which it passes the possible\n * choices as the `choices` attribute.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput passes a\n * `setFilter` function as prop to its child component. It uses the value to\n * create a filter for the query - by default { q: [searchText] }. You can\n * customize the mapping searchText => searchQuery by setting a custom\n * `filterToQuery` function prop:\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filterToQuery={searchText => ({ name: searchText })}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n */\n\nvar ReferenceArrayInputController = function (_a) {\n  var basePath = _a.basePath,\n      children = _a.children,\n      _b = _a.filter,\n      filter = _b === void 0 ? {} : _b,\n      input = _a.input,\n      _c = _a.filterToQuery,\n      filterToQuery = _c === void 0 ? function (searchText) {\n    return {\n      q: searchText\n    };\n  } : _c,\n      _d = _a.perPage,\n      perPage = _d === void 0 ? 25 : _d,\n      reference = _a.reference,\n      resource = _a.resource,\n      _e = _a.sort,\n      sort = _e === void 0 ? {\n    field: 'id',\n    order: 'DESC'\n  } : _e,\n      source = _a.source;\n\n  var _f = useReferenceArrayInputController({\n    basePath: basePath,\n    filter: filter,\n    filterToQuery: filterToQuery,\n    input: input,\n    perPage: perPage,\n    sort: sort,\n    reference: reference,\n    resource: resource,\n    source: source\n  }),\n      choices = _f.choices,\n      error = _f.error,\n      loaded = _f.loaded,\n      loading = _f.loading,\n      setFilter = _f.setFilter,\n      setPagination = _f.setPagination,\n      setSort = _f.setSort,\n      warning = _f.warning;\n\n  var debouncedSetFilter = useCallback(debounce(setFilter, 500), [setFilter]);\n  return children({\n    choices: choices,\n    error: error,\n    loaded: loaded,\n    loading: loading,\n    setFilter: debouncedSetFilter,\n    setPagination: setPagination,\n    setSort: setSort,\n    warning: warning\n  });\n};\n\nexport default ReferenceArrayInputController;","map":null,"metadata":{},"sourceType":"module"}