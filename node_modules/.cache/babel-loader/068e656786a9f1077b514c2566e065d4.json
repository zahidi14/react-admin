{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Children, createElement } from 'react';\nimport warning from '../util/warning';\nimport useAuthenticated from './useAuthenticated';\nimport usePermissions from './usePermissions';\n\nvar isEmptyChildren = function (children) {\n  return Children.count(children) === 0;\n};\n/**\n * After checking that the user is authenticated,\n * retrieves the user's permissions for a specific context.\n *\n * Useful for Route components ; used internally by Resource.\n * Use it to decorate your custom page components to require\n * a custom role. It will pass the permissions as a prop to your\n * component.\n *\n * You can set additional `authParams` at will if your authProvider\n * requires it.\n *\n * @example\n *     import { WithPermissions } from 'react-admin';\n *\n *     const Foo = ({ permissions }) => (\n *         {permissions === 'admin' ? <p>Sensitive data</p> : null}\n *         <p>Not sensitive data</p>\n *     );\n *\n *     const customRoutes = [\n *         <Route path=\"/foo\" render={() =>\n *             <WithPermissions\n *                  authParams={{ foo: 'bar' }}\n *                  render={({ permissions, ...props }) => <Foo permissions={permissions} {...props} />}\n *              />\n *         } />\n *     ];\n *     const App = () => (\n *         <Admin customRoutes={customRoutes}>\n *             ...\n *         </Admin>\n *     );\n */\n\n\nvar WithPermissions = function (_a) {\n  var authParams = _a.authParams,\n      children = _a.children,\n      render = _a.render,\n      component = _a.component,\n      staticContext = _a.staticContext,\n      props = __rest(_a, [\"authParams\", \"children\", \"render\", \"component\", \"staticContext\"]);\n\n  warning(render && children && !isEmptyChildren(children) || render && component || component && children && !isEmptyChildren(children), 'You should only use one of the `component`, `render` and `children` props in <WithPermissions>');\n  useAuthenticated(authParams);\n  var permissions = usePermissions(authParams).permissions; // render even though the usePermissions() call isn't finished (optimistic rendering)\n\n  if (component) {\n    return createElement(component, __assign({\n      permissions: permissions\n    }, props));\n  } // @deprecated\n\n\n  if (render) {\n    return render(__assign({\n      permissions: permissions\n    }, props));\n  } // @deprecated\n\n\n  if (children) {\n    return children(__assign({\n      permissions: permissions\n    }, props));\n  }\n};\n\nexport default WithPermissions;","map":null,"metadata":{},"sourceType":"module"}