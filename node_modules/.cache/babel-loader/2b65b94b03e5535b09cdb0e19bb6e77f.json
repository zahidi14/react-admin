{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Children, cloneElement, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Divider from '@material-ui/core/Divider';\nimport { Route } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TabbedShowLayoutTabs, { getTabFullPath } from './TabbedShowLayoutTabs';\nimport { useRouteMatch } from 'react-router-dom';\n\nvar sanitizeRestProps = function (_a) {\n  var children = _a.children,\n      className = _a.className,\n      record = _a.record,\n      resource = _a.resource,\n      basePath = _a.basePath,\n      version = _a.version,\n      initialValues = _a.initialValues,\n      staticContext = _a.staticContext,\n      translate = _a.translate,\n      tabs = _a.tabs,\n      rest = __rest(_a, [\"children\", \"className\", \"record\", \"resource\", \"basePath\", \"version\", \"initialValues\", \"staticContext\", \"translate\", \"tabs\"]);\n\n  return rest;\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    content: {\n      paddingTop: theme.spacing(1),\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2)\n    }\n  };\n});\n/**\n * Tabbed Layout for a Show view, showing fields grouped in tabs.\n *\n * Receives the current `record` from the parent `<Show>` component,\n * and passes it to its childen. Children should be Tab components.\n * The component passed as `tabs` props replaces the default material-ui's <Tabs> component.\n *\n * @example\n *     // in src/posts.js\n *     import React from 'react';\n *     import { Show, TabbedShowLayout, Tab, TextField } from 'react-admin';\n *\n *     export const PostShow = (props) => (\n *         <Show {...props}>\n *             <TabbedShowLayout>\n *                 <Tab label=\"Content\">\n *                     <TextField source=\"title\" />\n *                     <TextField source=\"subtitle\" />\n *                </Tab>\n *                 <Tab label=\"Metadata\">\n *                     <TextField source=\"category\" />\n *                </Tab>\n *             </TabbedShowLayout>\n *         </Show>\n *     );\n *\n *     // in src/App.js\n *     import React from 'react';\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostShow } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" show={PostShow} />\n *         </Admin>\n *     );\n *     export default App;\n */\n\nvar TabbedShowLayout = function (_a) {\n  var basePath = _a.basePath,\n      children = _a.children,\n      classesOverride = _a.classes,\n      className = _a.className,\n      record = _a.record,\n      resource = _a.resource,\n      version = _a.version,\n      value = _a.value,\n      tabs = _a.tabs,\n      rest = __rest(_a, [\"basePath\", \"children\", \"classes\", \"className\", \"record\", \"resource\", \"version\", \"value\", \"tabs\"]);\n\n  var match = useRouteMatch();\n  var classes = useStyles({\n    classes: classesOverride\n  });\n  return React.createElement(\"div\", __assign({\n    className: className,\n    key: version\n  }, sanitizeRestProps(rest)), cloneElement(tabs, {}, children), React.createElement(Divider, null), React.createElement(\"div\", {\n    className: classes.content\n  }, Children.map(children, function (tab, index) {\n    return tab && isValidElement(tab) ? React.createElement(Route, {\n      exact: true,\n      path: getTabFullPath(tab, index, match.url),\n      render: function () {\n        return cloneElement(tab, {\n          context: 'content',\n          resource: resource,\n          record: record,\n          basePath: basePath\n        });\n      }\n    }) : null;\n  })));\n};\n\nTabbedShowLayout.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  location: PropTypes.object,\n  match: PropTypes.object,\n  record: PropTypes.object,\n  resource: PropTypes.string,\n  basePath: PropTypes.string,\n  value: PropTypes.number,\n  version: PropTypes.number,\n  tabs: PropTypes.element\n};\nTabbedShowLayout.defaultProps = {\n  tabs: React.createElement(TabbedShowLayoutTabs, null)\n};\nexport default TabbedShowLayout;","map":null,"metadata":{},"sourceType":"module"}