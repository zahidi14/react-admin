{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport shouldUpdate from 'recompose/shouldUpdate';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FieldTitle, useTranslate } from 'ra-core'; // remove the sort icons when not active\n\nvar useStyles = makeStyles({\n  icon: {\n    display: 'none'\n  },\n  active: {\n    '& $icon': {\n      display: 'inline'\n    }\n  }\n});\nexport var DatagridHeaderCell = function (_a) {\n  var className = _a.className,\n      classesOverride = _a.classes,\n      field = _a.field,\n      currentSort = _a.currentSort,\n      updateSort = _a.updateSort,\n      resource = _a.resource,\n      isSorting = _a.isSorting,\n      rest = __rest(_a, [\"className\", \"classes\", \"field\", \"currentSort\", \"updateSort\", \"resource\", \"isSorting\"]);\n\n  var classes = useStyles({\n    classes: classesOverride\n  });\n  var translate = useTranslate();\n  return React.createElement(TableCell, __assign({\n    className: classnames(className, field.props.headerClassName),\n    align: field.props.textAlign,\n    variant: \"head\"\n  }, rest), field.props.sortable !== false && (field.props.sortBy || field.props.source) ? React.createElement(Tooltip, {\n    title: translate('ra.action.sort'),\n    placement: field.props.textAlign === 'right' ? 'bottom-end' : 'bottom-start',\n    enterDelay: 300\n  }, React.createElement(TableSortLabel, {\n    active: currentSort.field === (field.props.sortBy || field.props.source),\n    direction: currentSort.order === 'ASC' ? 'asc' : 'desc',\n    \"data-sort\": field.props.sortBy || field.props.source,\n    onClick: updateSort,\n    classes: classes\n  }, React.createElement(FieldTitle, {\n    label: field.props.label,\n    source: field.props.source,\n    resource: resource\n  }))) : React.createElement(FieldTitle, {\n    label: field.props.label,\n    source: field.props.source,\n    resource: resource\n  }));\n};\nDatagridHeaderCell.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object,\n  field: PropTypes.element,\n  currentSort: PropTypes.shape({\n    sort: PropTypes.string,\n    order: PropTypes.string\n  }).isRequired,\n  isSorting: PropTypes.bool,\n  sortable: PropTypes.bool,\n  resource: PropTypes.string,\n  updateSort: PropTypes.func.isRequired\n};\nexport default shouldUpdate(function (props, nextProps) {\n  return props.updateSort !== nextProps.updateSort || nextProps.isSorting && props.sortable !== nextProps.sortable;\n})(DatagridHeaderCell);","map":null,"metadata":{},"sourceType":"module"}