{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useMemo } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useSelector } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport debounce from 'lodash/debounce';\nimport union from 'lodash/union';\nimport isEqual from 'lodash/isEqual';\nimport { CRUD_GET_MANY } from '../actions/dataActions/crudGetMany';\nimport { useSafeSetState } from '../util/hooks';\nimport useDataProvider from './useDataProvider';\nimport { useEffect } from 'react';\nvar queriesToCall = {};\nvar dataProvider;\nvar DataProviderOptions = {\n  action: CRUD_GET_MANY\n};\n/**\n * Call the dataProvider.getMany() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false }\n * - success: { data: [data from response], loading: false, loaded: true }\n * - error: { error: [error from response], loading: false, loaded: true }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * This hook aggregates and deduplicates calls to the same resource, so for instance, if an app calls:\n *\n * useGetMany('tags', [1, 2, 3]);\n * useGetMany('tags', [3, 4]);\n *\n * during the same tick, the hook will only call the dataProvider once with the following parameters:\n *\n * dataProvider(GET_MANY, 'tags', [1, 2, 3, 4])\n *\n * @param resource The resource name, e.g. 'posts'\n * @param ids The resource identifiers, e.g. [123, 456, 789]\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success of failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as { data, error, loading, loaded }.\n *\n * @example\n *\n * import { useGetMany } from 'react-admin';\n *\n * const PostTags = ({ record }) => {\n *     const { data, loading, error } = useGetMany('tags', record.tagIds);\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return (\n *          <ul>\n *              {data.map(tag => (\n *                  <li key={tag.id}>{tag.name}</li>\n *              ))}\n *          </ul>\n *      );\n * };\n */\n\nvar useGetMany = function (resource, ids, options) {\n  if (options === void 0) {\n    options = {};\n  } // we can't use useQueryWithStore here because we're aggregating queries first\n  // therefore part of the useQueryWithStore logic will have to be repeated below\n\n\n  var selectMany = useMemo(makeGetManySelector, []);\n  var data = useSelector(function (state) {\n    return selectMany(state, resource, ids);\n  });\n\n  var _a = useSafeSetState({\n    data: data,\n    error: null,\n    loading: ids.length !== 0,\n    loaded: ids.length === 0 || data.length !== 0 && !data.includes(undefined)\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  if (!isEqual(state.data, data)) {\n    setState(__assign({}, state, {\n      data: data,\n      loaded: true\n    }));\n  }\n\n  dataProvider = useDataProvider(); // not the best way to pass the dataProvider to a function outside the hook, but I couldn't find a better one\n\n  useEffect(function () {\n    if (!queriesToCall[resource]) {\n      queriesToCall[resource] = [];\n    }\n    /**\n     * queriesToCall stores the queries to call under the following shape:\n     *\n     * {\n     *   'posts': [\n     *     { ids: [1, 2], setState }\n     *     { ids: [2, 3], setState, onSuccess }\n     *     { ids: [4, 5], setState }\n     *   ],\n     *   'comments': [\n     *     { ids: [345], setState, onFailure }\n     *   ]\n     * }\n     */\n\n\n    queriesToCall[resource] = queriesToCall[resource].concat({\n      ids: ids,\n      setState: setState,\n      onSuccess: options && options.onSuccess,\n      onFailure: options && options.onFailure\n    });\n    callQueries(); // debounced by lodash\n  }, [JSON.stringify({\n    resource: resource,\n    ids: ids,\n    options: options\n  }), dataProvider]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return state;\n};\n/**\n * Memoized selector for getting an array of resources based on an array of ids\n *\n * @see https://react-redux.js.org/next/api/hooks#using-memoizing-selectors\n */\n\n\nvar makeGetManySelector = function () {\n  return createSelector(function (state) {\n    return state.admin.resources;\n  }, function (_, resource) {\n    return resource;\n  }, function (_, __, ids) {\n    return ids;\n  }, function (resources, resource, ids) {\n    return resources[resource] ? ids.map(function (id) {\n      return resources[resource].data[id];\n    }) : ids.map(function (id) {\n      return undefined;\n    });\n  });\n};\n/**\n * Call the dataProvider once per resource\n */\n\n\nvar callQueries = debounce(function () {\n  var resources = Object.keys(queriesToCall);\n  resources.forEach(function (resource) {\n    var queries = queriesToCall[resource].slice(); // cloning to avoid side effects\n\n    /**\n     * Extract ids from queries, aggregate and deduplicate them\n     *\n     * @example from [[1, 2], [2, null, 3], [4, null]] to [1, 2, 3, 4]\n     */\n\n    var accumulatedIds = queries.reduce(function (acc, _a) {\n      var ids = _a.ids;\n      return union(acc, ids);\n    }, []) // concat + unique\n    .filter(function (v) {\n      return v != null && v !== '';\n    }); // remove null values\n\n    if (accumulatedIds.length === 0) {\n      // no need to call the data provider if all the ids are null\n      queries.forEach(function (_a) {\n        var ids = _a.ids,\n            setState = _a.setState,\n            onSuccess = _a.onSuccess;\n        setState({\n          data: emptyArray,\n          loading: false,\n          loaded: true\n        });\n\n        if (onSuccess) {\n          onSuccess({\n            data: emptyArray\n          });\n        }\n      });\n      return;\n    }\n\n    dataProvider.getMany(resource, {\n      ids: accumulatedIds\n    }, DataProviderOptions).then(function (response) {\n      // Forces batching, see https://stackoverflow.com/questions/48563650/does-react-keep-the-order-for-state-updates/48610973#48610973\n      return ReactDOM.unstable_batchedUpdates(function () {\n        return queries.forEach(function (_a) {\n          var ids = _a.ids,\n              setState = _a.setState,\n              onSuccess = _a.onSuccess;\n          setState(function (prevState) {\n            return __assign({}, prevState, {\n              error: null,\n              loading: false,\n              loaded: true\n            });\n          });\n\n          if (onSuccess) {\n            var subData = ids.map(function (id) {\n              return response.data.find(function (datum) {\n                return datum.id == id;\n              });\n            } // eslint-disable-line eqeqeq\n            );\n            onSuccess({\n              data: subData\n            });\n          }\n        });\n      });\n    }).catch(function (error) {\n      return ReactDOM.unstable_batchedUpdates(function () {\n        return queries.forEach(function (_a) {\n          var setState = _a.setState,\n              onFailure = _a.onFailure;\n          setState({\n            error: error,\n            loading: false,\n            loaded: false\n          });\n          onFailure && onFailure(error);\n        });\n      });\n    });\n    delete queriesToCall[resource];\n  });\n});\nvar emptyArray = [];\nexport default useGetMany;","map":null,"metadata":{},"sourceType":"module"}