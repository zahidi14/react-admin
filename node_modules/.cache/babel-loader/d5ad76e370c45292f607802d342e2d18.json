{"ast":null,"code":"import useMutation from './useMutation';\n/**\n * Get a callback to call the dataProvider.update() method, the result and the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: [callback, { loading: true, loaded: false }]\n * - success: [callback, { data: [data from response], loading: false, loaded: true }]\n * - error: [callback, { error: [error from response], loading: false, loaded: true }]\n *\n * @param resource The resource name, e.g. 'posts'\n * @param id The resource identifier, e.g. 123\n * @param data The updates to merge into the record, e.g. { views: 10 }\n * @param previousData The record before the update is applied\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success of failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as [update, { data, error, loading, loaded }].\n *\n * @example\n *\n * import { useUpdate } from 'react-admin';\n *\n * const IncreaseLikeButton = ({ record }) => {\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { loading, error }] = useUpdate('likes', record.id, diff, record);\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={update}>Like</div>;\n * };\n */\n\nvar useUpdate = function (resource, id, data, previousData, options) {\n  return useMutation({\n    type: 'update',\n    resource: resource,\n    payload: {\n      id: id,\n      data: data,\n      previousData: previousData\n    }\n  }, options);\n};\n\nexport default useUpdate;","map":null,"metadata":{},"sourceType":"module"}