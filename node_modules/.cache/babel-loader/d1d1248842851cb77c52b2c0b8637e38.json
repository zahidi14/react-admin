{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React from 'react';\n\nvar checkMinimumRequiredProps = function (displayName, requiredProps) {\n  return function (WrappedComponent) {\n    return function (props) {\n      useCheckMinimumRequiredProps(displayName, requiredProps, props);\n      return React.createElement(WrappedComponent, __assign({}, props));\n    };\n  };\n};\n\nexport default checkMinimumRequiredProps; // Not a hook but named that way to avoid conflicts with the old one\n\nexport var useCheckMinimumRequiredProps = function (displayName, requiredProps, props) {\n  var propNames = Object.keys(props);\n  var missingProps = requiredProps.filter(function (prop) {\n    return !propNames.includes(prop);\n  });\n\n  if (missingProps.length > 0) {\n    throw new Error(\"<\" + displayName + \"> component is not properly configured, some essential props are missing.\\nBe sure to pass the props from the parent. Example:\\n\\nconst My\" + displayName + \" = props => (\\n    <\" + displayName + \" {...props}></\" + displayName + \">\\n);\\n\\nThe missing props are: \" + missingProps.join(', '));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}