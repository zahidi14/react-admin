{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { CRUD_GET_MANY_REFERENCE_SUCCESS } from '../../../actions';\nimport { DELETE, DELETE_MANY } from '../../../core';\nvar initialState = {};\n\nvar oneToManyReducer = function (previousState, action) {\n  var _a;\n\n  if (previousState === void 0) {\n    previousState = initialState;\n  }\n\n  if (action.meta && action.meta.optimistic) {\n    var relatedTo = getRelatedReferences(previousState, action.meta.resource);\n\n    if (action.meta.fetch === DELETE) {\n      return relatedTo.reduce(removeDeletedReferences([action.payload.id]), previousState);\n    }\n\n    if (action.meta.fetch === DELETE_MANY) {\n      return relatedTo.reduce(removeDeletedReferences(action.payload.ids), previousState);\n    }\n  }\n\n  switch (action.type) {\n    case CRUD_GET_MANY_REFERENCE_SUCCESS:\n      return __assign({}, previousState, (_a = {}, _a[action.meta.relatedTo] = {\n        ids: action.payload.data.map(function (record) {\n          return record.id;\n        }),\n        total: action.payload.total\n      }, _a));\n\n    default:\n      return previousState;\n  }\n};\n\nexport var getIds = function (state, relatedTo) {\n  return state.admin.references.oneToMany[relatedTo] && state.admin.references.oneToMany[relatedTo].ids;\n};\nexport var getTotal = function (state, relatedTo) {\n  return state.admin.references.oneToMany[relatedTo] && state.admin.references.oneToMany[relatedTo].total;\n};\nexport var getReferences = function (state, reference, relatedTo) {\n  var ids = getIds(state, relatedTo);\n\n  if (typeof ids === 'undefined') {\n    return undefined;\n  }\n\n  if (!state.admin.resources[reference]) {\n    // eslint-disable-next-line no-console\n    console.error(\"Invalid Resource \\\"\" + reference + \"\\\"\\n\" + (\"You are trying to display or edit a field of a resource called \\\"\" + reference + \"\\\", \") + 'but it has not been declared.\\n' + \"Declare this resource in the Admin or check the 'reference' prop of ReferenceArrayField and ReferenceManyField.\", {\n      ids: ids\n    });\n  }\n\n  return ids.map(function (id) {\n    var resource = state.admin.resources[reference];\n\n    if (!resource) {\n      return undefined;\n    }\n\n    return resource.data[id];\n  }).filter(function (r) {\n    return typeof r !== 'undefined';\n  }).reduce(function (prev, record) {\n    prev[record.id] = record; // eslint-disable-line no-param-reassign\n\n    return prev;\n  }, {});\n};\nexport var getReferencesByIds = function (state, reference, ids) {\n  if (ids.length === 0) {\n    return {};\n  }\n\n  if (!state.admin.resources[reference]) {\n    // eslint-disable-next-line no-console\n    console.error(\"Invalid Resource \\\"\" + reference + \"\\\"\\n\" + (\"You are trying to display or edit a field of a resource called \\\"\" + reference + \"\\\", \") + 'but it has not been declared.\\n' + \"Declare this resource in the Admin or check the 'reference' prop of ReferenceArrayField.\", {\n      ids: ids\n    });\n  }\n\n  var references = ids.map(function (id) {\n    var resource = state.admin.resources[reference];\n\n    if (!resource) {\n      return undefined;\n    }\n\n    return resource.data[id];\n  }).filter(function (r) {\n    return typeof r !== 'undefined';\n  }).reduce(function (prev, record) {\n    prev[record.id] = record; // eslint-disable-line no-param-reassign\n\n    return prev;\n  }, {});\n  return Object.keys(references).length > 0 ? references : null;\n};\n\nvar getRelatedReferences = function (previousState, resource) {\n  return Object.keys(previousState).filter(function (key) {\n    return key.includes(resource);\n  });\n};\n\nvar removeDeletedReferences = function (removedIds) {\n  return function (previousState, key) {\n    var _a;\n\n    var idsToKeep = previousState[key].ids.filter(function (id) {\n      return !removedIds.includes(id);\n    });\n\n    if (idsToKeep.length === previousState[key].ids.length) {\n      return previousState;\n    }\n\n    return __assign({}, previousState, (_a = {}, _a[key] = {\n      ids: idsToKeep,\n      total: idsToKeep.length\n    }, _a));\n  };\n};\n\nexport var nameRelatedTo = function (reference, id, resource, target, filter) {\n  if (filter === void 0) {\n    filter = {};\n  }\n\n  var keys = Object.keys(filter);\n\n  if (!keys.length) {\n    return resource + \"_\" + reference + \"@\" + target + \"_\" + id;\n  }\n\n  return resource + \"_\" + reference + \"@\" + target + \"_\" + id + \"?\" + keys.map(function (key) {\n    return key + \"=\" + JSON.stringify(filter[key]);\n  }).join('&');\n};\nexport default oneToManyReducer;","map":null,"metadata":{},"sourceType":"module"}