{"ast":null,"code":"import { getStatusForInput as getDataStatus } from './referenceDataStatus';\nimport useTranslate from '../../i18n/useTranslate';\nimport useReference from '../useReference';\nimport useGetMatchingReferences from './useGetMatchingReferences';\nimport usePaginationState from '../usePaginationState';\nimport { useSortState } from '..';\nimport useFilterState from '../useFilterState';\n\nvar defaultReferenceSource = function (resource, source) {\n  return resource + \"@\" + source;\n};\n\nvar defaultFilter = {};\n/**\n * A hook for choosing a reference record. Useful for foreign keys.\n *\n * This hook fetches the possible values in the reference resource\n * (using `dataProvider.getMatching()`), it returns the possible choices\n * as the `choices` attribute.\n *\n * @example\n * const {\n *      choices, // the available reference resource\n * } = useReferenceInputController({\n *      input, // the input props\n *      resource: 'comments',\n *      reference: 'posts',\n *      source: 'post_id',\n * });\n *\n * The hook also allow to filter results. It returns a `setFilter`\n * function. It uses the value to create a filter\n * for the query - by default { q: [searchText] }. You can customize the mapping\n * searchText => searchQuery by setting a custom `filterToQuery` function option\n * You can also add a permanentFilter to further filter the result:\n *\n * @example\n * const {\n *      choices, // the available reference resource\n *      setFilter,\n * } = useReferenceInputController({\n *      input, // the input props\n *      resource: 'comments',\n *      reference: 'posts',\n *      source: 'post_id',\n *      permanentFilter: {\n *          author: 'john'\n *      },\n *      filterToQuery: searchText => ({ title: searchText })\n * });\n */\n\nvar useReferenceInputController = function (_a) {\n  var input = _a.input,\n      _b = _a.perPage,\n      perPage = _b === void 0 ? 25 : _b,\n      _c = _a.filter,\n      filter = _c === void 0 ? defaultFilter : _c,\n      reference = _a.reference,\n      filterToQuery = _a.filterToQuery,\n      _d = _a.referenceSource,\n      referenceSource = _d === void 0 ? defaultReferenceSource : _d,\n      resource = _a.resource,\n      sortOverride = _a.sort,\n      source = _a.source;\n  var translate = useTranslate();\n\n  var _e = usePaginationState({\n    perPage: perPage\n  }),\n      pagination = _e.pagination,\n      setPagination = _e.setPagination;\n\n  var _f = useSortState(sortOverride),\n      sort = _f.sort,\n      setSort = _f.setSort;\n\n  var _g = useFilterState({\n    permanentFilter: filter,\n    filterToQuery: filterToQuery\n  }),\n      filterValue = _g.filter,\n      setFilter = _g.setFilter;\n\n  var matchingReferences = useGetMatchingReferences({\n    reference: reference,\n    referenceSource: referenceSource,\n    filter: filterValue,\n    pagination: pagination,\n    sort: sort,\n    resource: resource,\n    source: source,\n    id: input.value\n  }).matchingReferences;\n  var referenceRecord = useReference({\n    id: input.value,\n    reference: reference\n  }).referenceRecord;\n  var dataStatus = getDataStatus({\n    input: input,\n    matchingReferences: matchingReferences,\n    referenceRecord: referenceRecord,\n    translate: translate\n  });\n  return {\n    choices: dataStatus.choices,\n    error: dataStatus.error,\n    loading: dataStatus.waiting,\n    filter: filterValue,\n    setFilter: setFilter,\n    pagination: pagination,\n    setPagination: setPagination,\n    sort: sort,\n    setSort: setSort,\n    warning: dataStatus.warning\n  };\n};\n\nexport default useReferenceInputController;","map":null,"metadata":{},"sourceType":"module"}