{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the data provider and pass the result to a child function\n *\n * @param {Function} children Must be a function which will be called with the mutate callback\n * @param {string} type The method called on the data provider, e.g. 'update', 'delete'. Can also be a custom method if the dataProvider supports is.\n * @param {string} resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} payload The payload object, e.g; { id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * @param {Function} options.onSuccess Side effect function to be executed upon success of failure, e.g. { onSuccess: response => refresh() } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) } }\n *\n * @example\n *\n * const ApproveButton = ({ record }) => (\n *     <Mutation\n *         type=\"update\"\n *         resource=\"comments\"\n *         payload={{ id: record.id, data: { isApproved: true } }}\n *     >\n *         {approve => (\n *             <Button label=\"Approve\" onClick={approve} />\n *         )}\n *     </Mutation>\n * );\n */\n\nvar Mutation = function (_a) {\n  var children = _a.children,\n      type = _a.type,\n      resource = _a.resource,\n      payload = _a.payload,\n      options = _a.options;\n  return children.apply(void 0, useMutation({\n    type: type,\n    resource: resource,\n    payload: payload\n  }, __assign({}, options, {\n    withDeclarativeSideEffectsSupport: true\n  })));\n};\n\nexport default Mutation;","map":null,"metadata":{},"sourceType":"module"}